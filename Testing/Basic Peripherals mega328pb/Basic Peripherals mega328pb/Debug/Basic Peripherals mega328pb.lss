
Basic Peripherals mega328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  000010ca  0000115e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  0080017a  0080017a  000011d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001278  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002626  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001302  00000000  00000000  00003b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a9  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  0000622c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f67  00000000  00000000  00006904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fcf  00000000  00000000  0000786b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000883a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_13>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_16>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_18>
      4c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ea ec       	ldi	r30, 0xCA	; 202
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	aa 37       	cpi	r26, 0x7A	; 122
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	aa e7       	ldi	r26, 0x7A	; 122
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	af 32       	cpi	r26, 0x2F	; 47
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 05 01 	call	0x20a	; 0x20a <main>
      ea:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      f2:	0e 94 8c 01 	call	0x318	; 0x318 <system_init>
      f6:	08 95       	ret

000000f8 <measure>:
	drive();
	display();

	// Schedule next display() to be called
	return process_cycles;
}
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ADC_0_get_conversion>
      fe:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <measurement+0x1>
     102:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <measurement>
     106:	68 ee       	ldi	r22, 0xE8	; 232
     108:	73 e0       	ldi	r23, 0x03	; 3
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	08 95       	ret

00000110 <drive>:
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	c0 91 1d 02 	lds	r28, 0x021D	; 0x80021d <measurement>
     118:	d0 91 1e 02 	lds	r29, 0x021E	; 0x80021e <measurement+0x1>
     11c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <ADC_0_get_resolution>
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 97       	sbiw	r24, 0x08	; 8
     124:	02 c0       	rjmp	.+4      	; 0x12a <drive+0x1a>
     126:	d6 95       	lsr	r29
     128:	c7 95       	ror	r28
     12a:	8a 95       	dec	r24
     12c:	e2 f7       	brpl	.-8      	; 0x126 <drive+0x16>
     12e:	d0 93 1c 02 	sts	0x021C, r29	; 0x80021c <duty+0x1>
     132:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <duty>
     136:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <duty>
     13a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <duty+0x1>
     13e:	0e 94 c9 01 	call	0x392	; 0x392 <PWM_0_load_duty_cycle_ch0>
     142:	68 ee       	ldi	r22, 0xE8	; 232
     144:	73 e0       	ldi	r23, 0x03	; 3
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <display>:
     150:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <measurement>
     154:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <measurement+0x1>
     158:	9f 93       	push	r25
     15a:	8f 93       	push	r24
     15c:	8e e4       	ldi	r24, 0x4E	; 78
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	9f 93       	push	r25
     162:	8f 93       	push	r24
     164:	0e 94 85 05 	call	0xb0a	; 0xb0a <printf>
     168:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <duty>
     16c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <duty+0x1>
     170:	9f 93       	push	r25
     172:	8f 93       	push	r24
     174:	87 e5       	ldi	r24, 0x57	; 87
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	9f 93       	push	r25
     17a:	8f 93       	push	r24
     17c:	0e 94 85 05 	call	0xb0a	; 0xb0a <printf>
     180:	8d b7       	in	r24, 0x3d	; 61
     182:	9e b7       	in	r25, 0x3e	; 62
     184:	08 96       	adiw	r24, 0x08	; 8
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	9e bf       	out	0x3e, r25	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	8d bf       	out	0x3d, r24	; 61
     190:	60 ea       	ldi	r22, 0xA0	; 160
     192:	7f e0       	ldi	r23, 0x0F	; 15
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	08 95       	ret

0000019a <clock1>:

static absolutetime_t clock1()
{
	printf("clock1=%d\r\n", clock_1++);
     19a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <clock_1>
     19e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <clock_1+0x1>
     1a2:	9c 01       	movw	r18, r24
     1a4:	2f 5f       	subi	r18, 0xFF	; 255
     1a6:	3f 4f       	sbci	r19, 0xFF	; 255
     1a8:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <clock_1+0x1>
     1ac:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <clock_1>
     1b0:	9f 93       	push	r25
     1b2:	8f 93       	push	r24
     1b4:	82 e6       	ldi	r24, 0x62	; 98
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	9f 93       	push	r25
     1ba:	8f 93       	push	r24
     1bc:	0e 94 85 05 	call	0xb0a	; 0xb0a <printf>

	// Schedule next clock1() to be called
	return clock1_cycles;
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
}
     1c8:	60 e4       	ldi	r22, 0x40	; 64
     1ca:	7f e1       	ldi	r23, 0x1F	; 31
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	08 95       	ret

000001d2 <clock2>:

static absolutetime_t clock2()
{
	printf("clock2=%d\r\n", clock_2++);
     1d2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
     1d6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <__data_end+0x1>
     1e4:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <__data_end>
     1e8:	9f 93       	push	r25
     1ea:	8f 93       	push	r24
     1ec:	8e e6       	ldi	r24, 0x6E	; 110
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	0e 94 85 05 	call	0xb0a	; 0xb0a <printf>

	// Schedule next clock2() to be called
	return clock2_cycles;
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
}
     200:	60 e8       	ldi	r22, 0x80	; 128
     202:	7e e3       	ldi	r23, 0x3E	; 62
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	08 95       	ret

0000020a <main>:
extern timer_struct_t *TIMER_0_list_head;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     20a:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	sei();
     20e:	78 94       	sei

	// Add tasks to scheduler

	TIMER_0_timeout_create(&measure_handle, measure_cycles);
     210:	48 ee       	ldi	r20, 0xE8	; 232
     212:	53 e0       	ldi	r21, 0x03	; 3
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	88 e2       	ldi	r24, 0x28	; 40
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 b5 03 	call	0x76a	; 0x76a <TIMER_0_timeout_create>
	TIMER_0_timeout_create(&drive_handle, drive_cycles);
     220:	48 ee       	ldi	r20, 0xE8	; 232
     222:	53 e0       	ldi	r21, 0x03	; 3
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	8e e1       	ldi	r24, 0x1E	; 30
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 b5 03 	call	0x76a	; 0x76a <TIMER_0_timeout_create>
	TIMER_0_timeout_create(&display_handle, display_cycles);
     230:	40 ea       	ldi	r20, 0xA0	; 160
     232:	5f e0       	ldi	r21, 0x0F	; 15
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	84 e1       	ldi	r24, 0x14	; 20
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 b5 03 	call	0x76a	; 0x76a <TIMER_0_timeout_create>

	// TIMER_0_timeout_create(&process_handle, process_cycles);

	TIMER_0_timeout_create(&clock1_handle, clock1_cycles);
     240:	40 e4       	ldi	r20, 0x40	; 64
     242:	5f e1       	ldi	r21, 0x1F	; 31
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	8a e0       	ldi	r24, 0x0A	; 10
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 b5 03 	call	0x76a	; 0x76a <TIMER_0_timeout_create>
	TIMER_0_timeout_create(&clock2_handle, clock2_cycles);
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5e e3       	ldi	r21, 0x3E	; 62
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 b5 03 	call	0x76a	; 0x76a <TIMER_0_timeout_create>

	while (1) {
		// Returns immediately if no callback is ready to execute
		TIMER_0_timeout_call_next_callback();
     260:	0e 94 18 04 	call	0x830	; 0x830 <TIMER_0_timeout_call_next_callback>
     264:	fd cf       	rjmp	.-6      	; 0x260 <main+0x56>

00000266 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
     266:	e4 e6       	ldi	r30, 0x64	; 100
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	8e 7f       	andi	r24, 0xFE	; 254
     26e:	80 83       	st	Z, r24
     270:	80 ec       	ldi	r24, 0xC0	; 192
     272:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     276:	84 e8       	ldi	r24, 0x84	; 132
     278:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     27c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret

00000284 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
     284:	ec e7       	ldi	r30, 0x7C	; 124
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	90 81       	ld	r25, Z
     28a:	90 7f       	andi	r25, 0xF0	; 240
     28c:	90 83       	st	Z, r25
	ADMUX |= channel;
     28e:	90 81       	ld	r25, Z
     290:	89 2b       	or	r24, r25
     292:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
     294:	ea e7       	ldi	r30, 0x7A	; 122
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	80 64       	ori	r24, 0x40	; 64
     29c:	80 83       	st	Z, r24
     29e:	08 95       	ret

000002a0 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
     2a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
}
     2a4:	82 95       	swap	r24
     2a6:	81 70       	andi	r24, 0x01	; 1
     2a8:	08 95       	ret

000002aa <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
     2aa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     2ae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	98 2f       	mov	r25, r24
     2b6:	88 27       	eor	r24, r24
}
     2b8:	82 2b       	or	r24, r18
     2ba:	08 95       	ret

000002bc <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
     2bc:	0e 94 42 01 	call	0x284	; 0x284 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
     2c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ADC_0_is_conversion_done>
     2c4:	88 23       	and	r24, r24
     2c6:	e1 f3       	breq	.-8      	; 0x2c0 <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
     2c8:	0e 94 55 01 	call	0x2aa	; 0x2aa <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
     2cc:	ea e7       	ldi	r30, 0x7A	; 122
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	20 81       	ld	r18, Z
     2d2:	20 61       	ori	r18, 0x10	; 16
     2d4:	20 83       	st	Z, r18
	return res;
}
     2d6:	08 95       	ret

000002d8 <ADC_0_get_resolution>:
 * \return The number of bits in the ADC conversion result
 */
uint8_t ADC_0_get_resolution()
{
	return 10;
}
     2d8:	8a e0       	ldi	r24, 0x0A	; 10
     2da:	08 95       	ret

000002dc <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
     2dc:	0e 94 33 01 	call	0x266	; 0x266 <ADC_0_init>
     2e0:	08 95       	ret

000002e2 <PWM_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     2e2:	8a b1       	in	r24, 0x0a	; 10
     2e4:	80 64       	ori	r24, 0x40	; 64
     2e6:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     2e8:	8b b1       	in	r24, 0x0b	; 11
     2ea:	8f 7b       	andi	r24, 0xBF	; 191
     2ec:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_0_init();
     2ee:	0e 94 be 01 	call	0x37c	; 0x37c <PWM_0_init>
     2f2:	08 95       	ret

000002f4 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_timeout_init();
     2f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <TIMER_0_timeout_init>
     2f8:	08 95       	ret

000002fa <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     2fa:	8a b1       	in	r24, 0x0a	; 10
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     300:	8b b1       	in	r24, 0x0b	; 11
     302:	8e 7f       	andi	r24, 0xFE	; 254
     304:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     306:	8a b1       	in	r24, 0x0a	; 10
     308:	82 60       	ori	r24, 0x02	; 2
     30a:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     30c:	8b b1       	in	r24, 0x0b	; 11
     30e:	8d 7f       	andi	r24, 0xFD	; 253
     310:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     312:	0e 94 61 05 	call	0xac2	; 0xac2 <USART_0_init>
     316:	08 95       	ret

00000318 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
     318:	8d e3       	ldi	r24, 0x3D	; 61
     31a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     324:	94 b1       	in	r25, 0x04	; 4
     326:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     328:	95 b1       	in	r25, 0x05	; 5
     32a:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     32c:	97 b1       	in	r25, 0x07	; 7
     32e:	90 78       	andi	r25, 0x80	; 128
     330:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
     332:	98 b1       	in	r25, 0x08	; 8
     334:	9f 67       	ori	r25, 0x7F	; 127
     336:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     338:	9a b1       	in	r25, 0x0a	; 10
     33a:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     33c:	9b b1       	in	r25, 0x0b	; 11
     33e:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
     340:	8d b1       	in	r24, 0x0d	; 13
     342:	80 7f       	andi	r24, 0xF0	; 240
     344:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
     346:	8e b1       	in	r24, 0x0e	; 14
     348:	8f 60       	ori	r24, 0x0F	; 15
     34a:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (1 << CLKPS0));
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	60 e8       	ldi	r22, 0x80	; 128
     350:	81 e6       	ldi	r24, 0x61	; 97
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 b7 01 	call	0x36e	; 0x36e <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     358:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     35a:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	ADC_0_initialization();
     35c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ADC_0_initialization>

	PWM_0_initialization();
     360:	0e 94 71 01 	call	0x2e2	; 0x2e2 <PWM_0_initialization>

	TIMER_0_initialization();
     364:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIMER_0_initialization>

	USART_0_initialization();
     368:	0e 94 7d 01 	call	0x2fa	; 0x2fa <USART_0_initialization>
     36c:	08 95       	ret

0000036e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     36e:	2f b7       	in	r18, 0x3f	; 63
	cli
     370:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     372:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     374:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     376:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     378:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     37a:	08 95       	ret

0000037c <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
     37c:	e4 e6       	ldi	r30, 0x64	; 100
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	8f 7d       	andi	r24, 0xDF	; 223
     384:	80 83       	st	Z, r24
     386:	83 e8       	ldi	r24, 0x83	; 131
     388:	84 bd       	out	0x24, r24	; 36
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	85 bd       	out	0x25, r24	; 37
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	08 95       	ret

00000392 <PWM_0_load_duty_cycle_ch0>:
     392:	87 bd       	out	0x27, r24	; 39
     394:	08 95       	ret

00000396 <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR0 |= (1 << TOV0);
     3a2:	85 b3       	in	r24, 0x15	; 21
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	85 bb       	out	0x15, r24	; 21

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
     3a8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <callback_count.1833>
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <callback_count.1833>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
     3b2:	8f 91       	pop	r24
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <TIMER_0_dummy_handler>:
	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = TIMER_0_execute_queue_head;
	while (tmp->next != NULL)
		tmp = tmp->next;

	tmp->next = timer;
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	cb 01       	movw	r24, r22
     3c4:	08 95       	ret

000003c6 <TIMER_0_timeout_init>:
     3c6:	e4 e6       	ldi	r30, 0x64	; 100
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	87 7f       	andi	r24, 0xF7	; 247
     3ce:	80 83       	st	Z, r24
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     3dc:	08 95       	ret

000003de <TIMER_0_stop_timeouts>:
     3de:	ef e6       	ldi	r30, 0x6F	; 111
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	8e 7f       	andi	r24, 0xFE	; 254
     3e6:	80 83       	st	Z, r24
     3e8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     3ec:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     3f0:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     3f4:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     3f8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TIMER_0_last_timer_load>
     3fc:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <TIMER_0_last_timer_load+0x1>
     400:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TIMER_0_last_timer_load+0x2>
     404:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TIMER_0_last_timer_load+0x3>
     408:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <TIMER_0_is_running>
     40c:	08 95       	ret

0000040e <TIMER_0_sorted_insert>:
     40e:	8f 92       	push	r8
     410:	9f 92       	push	r9
     412:	af 92       	push	r10
     414:	bf 92       	push	r11
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24
     428:	0e 81       	ldd	r16, Y+6	; 0x06
     42a:	1f 81       	ldd	r17, Y+7	; 0x07
     42c:	28 85       	ldd	r18, Y+8	; 0x08
     42e:	39 85       	ldd	r19, Y+9	; 0x09
     430:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <TIMER_0_list_head>
     434:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
     438:	1d 82       	std	Y+5, r1	; 0x05
     43a:	1c 82       	std	Y+4, r1	; 0x04
     43c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     440:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     444:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     448:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     44c:	08 17       	cp	r16, r24
     44e:	19 07       	cpc	r17, r25
     450:	2a 07       	cpc	r18, r26
     452:	3b 07       	cpc	r19, r27
     454:	08 f0       	brcs	.+2      	; 0x458 <TIMER_0_sorted_insert+0x4a>
     456:	6f c0       	rjmp	.+222    	; 0x536 <TIMER_0_sorted_insert+0x128>
     458:	df 01       	movw	r26, r30
     45a:	c0 90 84 01 	lds	r12, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     45e:	d0 90 85 01 	lds	r13, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     462:	e0 90 86 01 	lds	r14, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     466:	f0 90 87 01 	lds	r15, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     46a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <TIMER_0_is_running>
     46e:	88 23       	and	r24, r24
     470:	e1 f1       	breq	.+120    	; 0x4ea <TIMER_0_sorted_insert+0xdc>
     472:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     476:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 90 80 01 	lds	r8, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
     482:	90 90 81 01 	lds	r9, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
     486:	a0 90 82 01 	lds	r10, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
     48a:	b0 90 83 01 	lds	r11, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
     48e:	48 15       	cp	r20, r8
     490:	59 05       	cpc	r21, r9
     492:	6a 05       	cpc	r22, r10
     494:	7b 05       	cpc	r23, r11
     496:	20 f4       	brcc	.+8      	; 0x4a0 <TIMER_0_sorted_insert+0x92>
     498:	4f ef       	ldi	r20, 0xFF	; 255
     49a:	5f ef       	ldi	r21, 0xFF	; 255
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 90 80 01 	lds	r8, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
     4a4:	90 90 81 01 	lds	r9, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
     4a8:	a0 90 82 01 	lds	r10, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
     4ac:	b0 90 83 01 	lds	r11, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
     4b0:	48 19       	sub	r20, r8
     4b2:	59 09       	sbc	r21, r9
     4b4:	6a 09       	sbc	r22, r10
     4b6:	7b 09       	sbc	r23, r11
     4b8:	c4 0e       	add	r12, r20
     4ba:	d5 1e       	adc	r13, r21
     4bc:	e6 1e       	adc	r14, r22
     4be:	f7 1e       	adc	r15, r23
     4c0:	14 c0       	rjmp	.+40     	; 0x4ea <TIMER_0_sorted_insert+0xdc>
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	4d 91       	ld	r20, X+
     4c6:	5d 91       	ld	r21, X+
     4c8:	6d 91       	ld	r22, X+
     4ca:	7c 91       	ld	r23, X
     4cc:	19 97       	sbiw	r26, 0x09	; 9
     4ce:	4c 19       	sub	r20, r12
     4d0:	5d 09       	sbc	r21, r13
     4d2:	6e 09       	sbc	r22, r14
     4d4:	7f 09       	sbc	r23, r15
     4d6:	16 96       	adiw	r26, 0x06	; 6
     4d8:	4d 93       	st	X+, r20
     4da:	5d 93       	st	X+, r21
     4dc:	6d 93       	st	X+, r22
     4de:	7c 93       	st	X, r23
     4e0:	19 97       	sbiw	r26, 0x09	; 9
     4e2:	14 96       	adiw	r26, 0x04	; 4
     4e4:	0d 90       	ld	r0, X+
     4e6:	bc 91       	ld	r27, X
     4e8:	a0 2d       	mov	r26, r0
     4ea:	10 97       	sbiw	r26, 0x00	; 0
     4ec:	51 f7       	brne	.-44     	; 0x4c2 <TIMER_0_sorted_insert+0xb4>
     4ee:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     4f2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     4f6:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     4fa:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     4fe:	8c 19       	sub	r24, r12
     500:	9d 09       	sbc	r25, r13
     502:	ae 09       	sbc	r26, r14
     504:	bf 09       	sbc	r27, r15
     506:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     50a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     50e:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     512:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	a1 e0       	ldi	r26, 0x01	; 1
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	8c 19       	sub	r24, r12
     520:	9d 09       	sbc	r25, r13
     522:	ae 09       	sbc	r26, r14
     524:	bf 09       	sbc	r27, r15
     526:	08 0f       	add	r16, r24
     528:	19 1f       	adc	r17, r25
     52a:	2a 1f       	adc	r18, r26
     52c:	3b 1f       	adc	r19, r27
     52e:	0e 83       	std	Y+6, r16	; 0x06
     530:	1f 83       	std	Y+7, r17	; 0x07
     532:	28 87       	std	Y+8, r18	; 0x08
     534:	39 87       	std	Y+9, r19	; 0x09
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e c0       	rjmp	.+28     	; 0x55a <TIMER_0_sorted_insert+0x14c>
     53e:	46 81       	ldd	r20, Z+6	; 0x06
     540:	57 81       	ldd	r21, Z+7	; 0x07
     542:	60 85       	ldd	r22, Z+8	; 0x08
     544:	71 85       	ldd	r23, Z+9	; 0x09
     546:	04 17       	cp	r16, r20
     548:	15 07       	cpc	r17, r21
     54a:	26 07       	cpc	r18, r22
     54c:	37 07       	cpc	r19, r23
     54e:	38 f0       	brcs	.+14     	; 0x55e <TIMER_0_sorted_insert+0x150>
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	df 01       	movw	r26, r30
     554:	04 80       	ldd	r0, Z+4	; 0x04
     556:	f5 81       	ldd	r31, Z+5	; 0x05
     558:	e0 2d       	mov	r30, r0
     55a:	30 97       	sbiw	r30, 0x00	; 0
     55c:	81 f7       	brne	.-32     	; 0x53e <TIMER_0_sorted_insert+0x130>
     55e:	91 30       	cpi	r25, 0x01	; 1
     560:	69 f5       	brne	.+90     	; 0x5bc <TIMER_0_sorted_insert+0x1ae>
     562:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TIMER_0_last_timer_load>
     566:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <TIMER_0_last_timer_load+0x1>
     56a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TIMER_0_last_timer_load+0x2>
     56e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TIMER_0_last_timer_load+0x3>
     572:	e4 e8       	ldi	r30, 0x84	; 132
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	11 82       	std	Z+1, r1	; 0x01
     578:	10 82       	st	Z, r1
     57a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
     57e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
     582:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
     586:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
     58e:	86 b3       	in	r24, 0x16	; 22
     590:	81 60       	ori	r24, 0x01	; 1
     592:	86 bb       	out	0x16, r24	; 22
     594:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <TIMER_0_list_head>
     598:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
     59c:	22 e0       	ldi	r18, 0x02	; 2
     59e:	8f 31       	cpi	r24, 0x1F	; 31
     5a0:	92 07       	cpc	r25, r18
     5a2:	21 f4       	brne	.+8      	; 0x5ac <TIMER_0_sorted_insert+0x19e>
     5a4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TIMER_0_dummy+0x4>
     5a8:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <TIMER_0_dummy+0x5>
     5ac:	9d 83       	std	Y+5, r25	; 0x05
     5ae:	8c 83       	std	Y+4, r24	; 0x04
     5b0:	d0 93 8b 01 	sts	0x018B, r29	; 0x80018b <TIMER_0_list_head+0x1>
     5b4:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <TIMER_0_list_head>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <TIMER_0_sorted_insert+0x1c4>
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	8d 91       	ld	r24, X+
     5c0:	9c 91       	ld	r25, X
     5c2:	15 97       	sbiw	r26, 0x05	; 5
     5c4:	9d 83       	std	Y+5, r25	; 0x05
     5c6:	8c 83       	std	Y+4, r24	; 0x04
     5c8:	15 96       	adiw	r26, 0x05	; 5
     5ca:	dc 93       	st	X, r29
     5cc:	ce 93       	st	-X, r28
     5ce:	14 97       	sbiw	r26, 0x04	; 4
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	9f 90       	pop	r9
     5e8:	8f 90       	pop	r8
     5ea:	08 95       	ret

000005ec <TIMER_0_start_timer_at_head>:
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	ef e6       	ldi	r30, 0x6F	; 111
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	8e 7f       	andi	r24, 0xFE	; 254
     5f8:	80 83       	st	Z, r24
     5fa:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <TIMER_0_list_head>
     5fe:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
     602:	30 97       	sbiw	r30, 0x00	; 0
     604:	19 f4       	brne	.+6      	; 0x60c <TIMER_0_start_timer_at_head+0x20>
     606:	0e 94 ef 01 	call	0x3de	; 0x3de <TIMER_0_stop_timeouts>
     60a:	5d c0       	rjmp	.+186    	; 0x6c6 <TIMER_0_start_timer_at_head+0xda>
     60c:	86 81       	ldd	r24, Z+6	; 0x06
     60e:	97 81       	ldd	r25, Z+7	; 0x07
     610:	a0 85       	ldd	r26, Z+8	; 0x08
     612:	b1 85       	ldd	r27, Z+9	; 0x09
     614:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     618:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     61c:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     620:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     624:	84 1b       	sub	r24, r20
     626:	95 0b       	sbc	r25, r21
     628:	a6 0b       	sbc	r26, r22
     62a:	b7 0b       	sbc	r27, r23
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	01 e0       	ldi	r16, 0x01	; 1
     630:	a0 07       	cpc	r26, r16
     632:	b1 05       	cpc	r27, r1
     634:	00 f1       	brcs	.+64     	; 0x676 <TIMER_0_start_timer_at_head+0x8a>
     636:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     63a:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     63e:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     642:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     646:	41 50       	subi	r20, 0x01	; 1
     648:	51 09       	sbc	r21, r1
     64a:	6f 4f       	sbci	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	af e1       	ldi	r26, 0x1F	; 31
     650:	b2 e0       	ldi	r27, 0x02	; 2
     652:	16 96       	adiw	r26, 0x06	; 6
     654:	4d 93       	st	X+, r20
     656:	5d 93       	st	X+, r21
     658:	6d 93       	st	X+, r22
     65a:	7c 93       	st	X, r23
     65c:	19 97       	sbiw	r26, 0x09	; 9
     65e:	15 96       	adiw	r26, 0x05	; 5
     660:	fc 93       	st	X, r31
     662:	ee 93       	st	-X, r30
     664:	14 97       	sbiw	r26, 0x04	; 4
     666:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <TIMER_0_list_head+0x1>
     66a:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <TIMER_0_list_head>
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	4f ef       	ldi	r20, 0xFF	; 255
     678:	5f ef       	ldi	r21, 0xFF	; 255
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	8a 01       	movw	r16, r20
     680:	9b 01       	movw	r18, r22
     682:	08 1b       	sub	r16, r24
     684:	19 0b       	sbc	r17, r25
     686:	2a 0b       	sbc	r18, r26
     688:	3b 0b       	sbc	r19, r27
     68a:	00 93 80 01 	sts	0x0180, r16	; 0x800180 <TIMER_0_last_timer_load>
     68e:	10 93 81 01 	sts	0x0181, r17	; 0x800181 <TIMER_0_last_timer_load+0x1>
     692:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <TIMER_0_last_timer_load+0x2>
     696:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <TIMER_0_last_timer_load+0x3>
     69a:	e4 e8       	ldi	r30, 0x84	; 132
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	11 82       	std	Z+1, r1	; 0x01
     6a0:	10 82       	st	Z, r1
     6a2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
     6a6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
     6aa:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
     6ae:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
     6b2:	91 83       	std	Z+1, r25	; 0x01
     6b4:	80 83       	st	Z, r24
     6b6:	ef e6       	ldi	r30, 0x6F	; 111
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	81 60       	ori	r24, 0x01	; 1
     6be:	80 83       	st	Z, r24
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <TIMER_0_is_running>
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <TIMER_0_timeout_delete_helper>:
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	89 2b       	or	r24, r25
     6d4:	a1 f1       	breq	.+104    	; 0x73e <TIMER_0_timeout_delete_helper+0x72>
     6d6:	af e6       	ldi	r26, 0x6F	; 111
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	8c 91       	ld	r24, X
     6dc:	8e 7f       	andi	r24, 0xFE	; 254
     6de:	8c 93       	st	X, r24
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	86 17       	cp	r24, r22
     6e6:	97 07       	cpc	r25, r23
     6e8:	61 f4       	brne	.+24     	; 0x702 <TIMER_0_timeout_delete_helper+0x36>
     6ea:	a0 81       	ld	r26, Z
     6ec:	b1 81       	ldd	r27, Z+1	; 0x01
     6ee:	14 96       	adiw	r26, 0x04	; 4
     6f0:	8d 91       	ld	r24, X+
     6f2:	9c 91       	ld	r25, X
     6f4:	15 97       	sbiw	r26, 0x05	; 5
     6f6:	91 83       	std	Z+1, r25	; 0x01
     6f8:	80 83       	st	Z, r24
     6fa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TIMER_0_start_timer_at_head>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	08 95       	ret
     702:	01 90       	ld	r0, Z+
     704:	f0 81       	ld	r31, Z
     706:	e0 2d       	mov	r30, r0
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	0f c0       	rjmp	.+30     	; 0x72c <TIMER_0_timeout_delete_helper+0x60>
     70e:	e6 17       	cp	r30, r22
     710:	f7 07       	cpc	r31, r23
     712:	41 f4       	brne	.+16     	; 0x724 <TIMER_0_timeout_delete_helper+0x58>
     714:	84 81       	ldd	r24, Z+4	; 0x04
     716:	95 81       	ldd	r25, Z+5	; 0x05
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	9c 93       	st	X, r25
     71c:	8e 93       	st	-X, r24
     71e:	14 97       	sbiw	r26, 0x04	; 4
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	07 c0       	rjmp	.+14     	; 0x732 <TIMER_0_timeout_delete_helper+0x66>
     724:	df 01       	movw	r26, r30
     726:	04 80       	ldd	r0, Z+4	; 0x04
     728:	f5 81       	ldd	r31, Z+5	; 0x05
     72a:	e0 2d       	mov	r30, r0
     72c:	30 97       	sbiw	r30, 0x00	; 0
     72e:	79 f7       	brne	.-34     	; 0x70e <TIMER_0_timeout_delete_helper+0x42>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	ef e6       	ldi	r30, 0x6F	; 111
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	90 81       	ld	r25, Z
     738:	91 60       	ori	r25, 0x01	; 1
     73a:	90 83       	st	Z, r25
     73c:	08 95       	ret
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret

00000742 <TIMER_0_timeout_delete>:
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
     748:	bc 01       	movw	r22, r24
     74a:	8a e8       	ldi	r24, 0x8A	; 138
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 66 03 	call	0x6cc	; 0x6cc <TIMER_0_timeout_delete_helper>
     752:	81 11       	cpse	r24, r1
     754:	05 c0       	rjmp	.+10     	; 0x760 <TIMER_0_timeout_delete+0x1e>
     756:	be 01       	movw	r22, r28
     758:	88 e8       	ldi	r24, 0x88	; 136
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 66 03 	call	0x6cc	; 0x6cc <TIMER_0_timeout_delete_helper>
     760:	1d 82       	std	Y+5, r1	; 0x05
     762:	1c 82       	std	Y+4, r1	; 0x04
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <TIMER_0_timeout_create>:

// This function starts the timer provided with an expiry equal to "timeout".
// If the timer was already active/running it will be replaced by this and the
//    old (active) timer will be removed/cancelled first
void TIMER_0_timeout_create(timer_struct_t *timer, absolutetime_t timeout)
{
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	ec 01       	movw	r28, r24
     778:	6a 01       	movw	r12, r20
     77a:	7b 01       	movw	r14, r22
	// If this timer is already active, replace it
	TIMER_0_timeout_delete(timer);
     77c:	0e 94 a1 03 	call	0x742	; 0x742 <TIMER_0_timeout_delete>

	TIMSK1 &= ~(1 << TOIE1);
     780:	ef e6       	ldi	r30, 0x6F	; 111
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8e 7f       	andi	r24, 0xFE	; 254
     788:	80 83       	st	Z, r24

// Convert the time provided from a "relative to now" time to a absolute time which
//    means ticks since the last timeout occurred or the timer module was started
inline absolutetime_t TIMER_0_make_absolute(absolutetime_t timeout)
{
	timeout += TIMER_0_absolute_time_of_last_timeout;
     78a:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     78e:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     792:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     796:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
     79a:	4c 0d       	add	r20, r12
     79c:	5d 1d       	adc	r21, r13
     79e:	6e 1d       	adc	r22, r14
     7a0:	7f 1d       	adc	r23, r15
	if (TIMER_0_is_running) {
     7a2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <TIMER_0_is_running>
     7a6:	88 23       	and	r24, r24
     7a8:	39 f1       	breq	.+78     	; 0x7f8 <TIMER_0_timeout_create+0x8e>
		uint32_t timerVal = TCNT1;
     7aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     7ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     7b2:	a0 e0       	ldi	r26, 0x00	; 0
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
		if (timerVal < TIMER_0_last_timer_load) {
     7b6:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
     7ba:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
     7be:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
     7c2:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
     7c6:	8c 15       	cp	r24, r12
     7c8:	9d 05       	cpc	r25, r13
     7ca:	ae 05       	cpc	r26, r14
     7cc:	bf 05       	cpc	r27, r15
     7ce:	20 f4       	brcc	.+8      	; 0x7d8 <TIMER_0_timeout_create+0x6e>
			timerVal = (65535);
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	9f ef       	ldi	r25, 0xFF	; 255
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
		}
		timeout += timerVal - TIMER_0_last_timer_load;
     7d8:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
     7dc:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
     7e0:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
     7e4:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
     7e8:	8c 19       	sub	r24, r12
     7ea:	9d 09       	sbc	r25, r13
     7ec:	ae 09       	sbc	r26, r14
     7ee:	bf 09       	sbc	r27, r15
     7f0:	48 0f       	add	r20, r24
     7f2:	59 1f       	adc	r21, r25
     7f4:	6a 1f       	adc	r22, r26
     7f6:	7b 1f       	adc	r23, r27
	// If this timer is already active, replace it
	TIMER_0_timeout_delete(timer);

	TIMSK1 &= ~(1 << TOIE1);

	timer->absolute_time = TIMER_0_make_absolute(timeout);
     7f8:	4e 83       	std	Y+6, r20	; 0x06
     7fa:	5f 83       	std	Y+7, r21	; 0x07
     7fc:	68 87       	std	Y+8, r22	; 0x08
     7fe:	79 87       	std	Y+9, r23	; 0x09

	// We only have to start the timer at head if the insert was at the head
	if (TIMER_0_sorted_insert(timer)) {
     800:	ce 01       	movw	r24, r28
     802:	0e 94 07 02 	call	0x40e	; 0x40e <TIMER_0_sorted_insert>
     806:	88 23       	and	r24, r24
     808:	19 f0       	breq	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		TIMER_0_start_timer_at_head();
     80a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TIMER_0_start_timer_at_head>
     80e:	09 c0       	rjmp	.+18     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	} else {
		if (TIMER_0_is_running)
     810:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <TIMER_0_is_running>
     814:	88 23       	and	r24, r24
     816:	29 f0       	breq	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			TIMSK1 |= (1 << TOIE1);
     818:	ef e6       	ldi	r30, 0x6F	; 111
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	81 60       	ori	r24, 0x01	; 1
     820:	80 83       	st	Z, r24
	}
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <TIMER_0_timeout_call_next_callback>:
// It is recommended this is called from the main superloop (while(1)) in your code
//    but by design this can also be called from the timer ISR. If you wish callbacks
//    to happen from the ISR context you can call this as the last action in timeout_isr
//    instead.
void TIMER_0_timeout_call_next_callback(void)
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29

	if (TIMER_0_execute_queue_head == NULL)
     834:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
     838:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>
     83c:	89 2b       	or	r24, r25
     83e:	61 f1       	breq	.+88     	; 0x898 <TIMER_0_timeout_call_next_callback+0x68>
		return;

	bool tempIE = (TIMSK1 & (1 << TOIE1)) >> TOIE1;
     840:	ef e6       	ldi	r30, 0x6F	; 111
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	90 81       	ld	r25, Z

	TIMSK1 &= ~(1 << TOIE1);
     846:	80 81       	ld	r24, Z
     848:	8e 7f       	andi	r24, 0xFE	; 254
     84a:	80 83       	st	Z, r24

	timer_struct_t *callback_timer = TIMER_0_execute_queue_head;
     84c:	c0 91 88 01 	lds	r28, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
     850:	d0 91 89 01 	lds	r29, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>

	// Done, remove from list
	TIMER_0_execute_queue_head = TIMER_0_execute_queue_head->next;
     854:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
     858:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>
     85c:	24 81       	ldd	r18, Z+4	; 0x04
     85e:	35 81       	ldd	r19, Z+5	; 0x05
     860:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <TIMER_0_execute_queue_head+0x1>
     864:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <TIMER_0_execute_queue_head>
	// Mark the timer as not in use
	callback_timer->next = NULL;
     868:	1d 82       	std	Y+5, r1	; 0x05
     86a:	1c 82       	std	Y+4, r1	; 0x04
	if (tempIE) {
     86c:	90 ff       	sbrs	r25, 0
     86e:	05 c0       	rjmp	.+10     	; 0x87a <TIMER_0_timeout_call_next_callback+0x4a>
		TIMSK1 |= (1 << TOIE1);
     870:	ef e6       	ldi	r30, 0x6F	; 111
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	81 60       	ori	r24, 0x01	; 1
     878:	80 83       	st	Z, r24
	}

	absolutetime_t reschedule = callback_timer->callback_ptr(callback_timer->payload);
     87a:	e8 81       	ld	r30, Y
     87c:	f9 81       	ldd	r31, Y+1	; 0x01
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	9b 81       	ldd	r25, Y+3	; 0x03
     882:	09 95       	icall

	// Do we have to reschedule it? If yes then add delta to absolute for reschedule
	if (reschedule) {
     884:	61 15       	cp	r22, r1
     886:	71 05       	cpc	r23, r1
     888:	81 05       	cpc	r24, r1
     88a:	91 05       	cpc	r25, r1
     88c:	29 f0       	breq	.+10     	; 0x898 <TIMER_0_timeout_call_next_callback+0x68>
		TIMER_0_timeout_create(callback_timer, reschedule);
     88e:	ab 01       	movw	r20, r22
     890:	bc 01       	movw	r22, r24
     892:	ce 01       	movw	r24, r28
     894:	0e 94 b5 03 	call	0x76a	; 0x76a <TIMER_0_timeout_create>
	}
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <__vector_13>:
	}
}

// NOTE: assumes the callback completes before the next timer tick
ISR(TIMER1_OVF_vect)
{
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	11 24       	eor	r1, r1
     8a8:	2f 93       	push	r18
     8aa:	3f 93       	push	r19
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	6f 93       	push	r22
     8b2:	7f 93       	push	r23
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	af 93       	push	r26
     8ba:	bf 93       	push	r27
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
	timer_struct_t *next                  = TIMER_0_list_head->next;
     8c0:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <TIMER_0_list_head>
     8c4:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
     8c8:	14 96       	adiw	r26, 0x04	; 4
     8ca:	2d 91       	ld	r18, X+
     8cc:	3c 91       	ld	r19, X
     8ce:	15 97       	sbiw	r26, 0x05	; 5
	TIMER_0_absolute_time_of_last_timeout = TIMER_0_list_head->absolute_time;
     8d0:	16 96       	adiw	r26, 0x06	; 6
     8d2:	4d 91       	ld	r20, X+
     8d4:	5d 91       	ld	r21, X+
     8d6:	6d 91       	ld	r22, X+
     8d8:	7c 91       	ld	r23, X
     8da:	19 97       	sbiw	r26, 0x09	; 9
     8dc:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
     8e0:	50 93 85 01 	sts	0x0185, r21	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
     8e4:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
     8e8:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
	TIMER_0_last_timer_load               = 0;
     8ec:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TIMER_0_last_timer_load>
     8f0:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <TIMER_0_last_timer_load+0x1>
     8f4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TIMER_0_last_timer_load+0x2>
     8f8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TIMER_0_last_timer_load+0x3>
// Moves the timer from the active list to the list of timers which are expired and
//    needs their callbacks called in call_next_callback
inline void TIMER_0_enqueue_callback(timer_struct_t *timer)
{
	timer_struct_t *tmp;
	if (timer == &TIMER_0_dummy)
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	af 31       	cpi	r26, 0x1F	; 31
     900:	b8 07       	cpc	r27, r24
     902:	11 f4       	brne	.+4      	; 0x908 <__stack+0x9>
		timer = &TIMER_0_dummy_exec; // keeping a separate copy for dummy in execution queue to avoid the modification
     904:	a2 e3       	ldi	r26, 0x32	; 50
     906:	b1 e0       	ldi	r27, 0x01	; 1
		                             // of next from the timer list.

	timer->next = NULL;
     908:	15 96       	adiw	r26, 0x05	; 5
     90a:	1c 92       	st	X, r1
     90c:	1e 92       	st	-X, r1
     90e:	14 97       	sbiw	r26, 0x04	; 4

	// Special case for empty list
	if (TIMER_0_execute_queue_head == NULL) {
     910:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
     914:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>
     918:	89 2b       	or	r24, r25
     91a:	29 f4       	brne	.+10     	; 0x926 <__stack+0x27>
		TIMER_0_execute_queue_head = timer;
     91c:	b0 93 89 01 	sts	0x0189, r27	; 0x800189 <TIMER_0_execute_queue_head+0x1>
     920:	a0 93 88 01 	sts	0x0188, r26	; 0x800188 <TIMER_0_execute_queue_head>
     924:	0c c0       	rjmp	.+24     	; 0x93e <__stack+0x3f>
		return;
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = TIMER_0_execute_queue_head;
     926:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
     92a:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>
     92e:	01 c0       	rjmp	.+2      	; 0x932 <__stack+0x33>
	while (tmp->next != NULL)
		tmp = tmp->next;
     930:	fc 01       	movw	r30, r24
		return;
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = TIMER_0_execute_queue_head;
	while (tmp->next != NULL)
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	95 81       	ldd	r25, Z+5	; 0x05
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	d9 f7       	brne	.-10     	; 0x930 <__stack+0x31>
		tmp = tmp->next;

	tmp->next = timer;
     93a:	b5 83       	std	Z+5, r27	; 0x05
     93c:	a4 83       	std	Z+4, r26	; 0x04
	TIMER_0_absolute_time_of_last_timeout = TIMER_0_list_head->absolute_time;
	TIMER_0_last_timer_load               = 0;

	TIMER_0_enqueue_callback(TIMER_0_list_head);

	TIMER_0_list_head = next;
     93e:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <TIMER_0_list_head+0x1>
     942:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <TIMER_0_list_head>

	TIMER_0_start_timer_at_head();
     946:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TIMER_0_start_timer_at_head>
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <USART_0_default_rx_isr_cb>:
	USART_0_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_0_rxbuf[tmptail];
}
     96c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     970:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <USART_0_rx_head>
     974:	ef 5f       	subi	r30, 0xFF	; 255
     976:	e7 70       	andi	r30, 0x07	; 7
     978:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USART_0_rx_tail>
     97c:	e8 17       	cp	r30, r24
     97e:	59 f0       	breq	.+22     	; 0x996 <USART_0_default_rx_isr_cb+0x2a>
     980:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <USART_0_rx_head>
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	ee 5e       	subi	r30, 0xEE	; 238
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	90 83       	st	Z, r25
     98c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USART_0_rx_elements>
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <USART_0_rx_elements>
     996:	08 95       	ret

00000998 <USART_0_default_udre_isr_cb>:
     998:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
     99c:	88 23       	and	r24, r24
     99e:	89 f0       	breq	.+34     	; 0x9c2 <USART_0_default_udre_isr_cb+0x2a>
     9a0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <USART_0_tx_tail>
     9a4:	ef 5f       	subi	r30, 0xFF	; 255
     9a6:	ef 77       	andi	r30, 0x7F	; 127
     9a8:	e0 93 8d 01 	sts	0x018D, r30	; 0x80018d <USART_0_tx_tail>
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e1 57       	subi	r30, 0x71	; 113
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	80 81       	ld	r24, Z
     9b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9b8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
     9bc:	81 50       	subi	r24, 0x01	; 1
     9be:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <USART_0_tx_elements>
     9c2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
     9c6:	81 11       	cpse	r24, r1
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <USART_0_default_udre_isr_cb+0x3c>
     9ca:	e1 ec       	ldi	r30, 0xC1	; 193
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 7d       	andi	r24, 0xDF	; 223
     9d2:	80 83       	st	Z, r24
     9d4:	08 95       	ret

000009d6 <__vector_18>:
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
     9f8:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <USART_0_rx_isr_cb>
     9fc:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <USART_0_rx_isr_cb+0x1>
     a00:	30 97       	sbiw	r30, 0x00	; 0
     a02:	09 f0       	breq	.+2      	; 0xa06 <__vector_18+0x30>
     a04:	09 95       	icall
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_19>:
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
     a4a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <USART_0_udre_isr_cb>
     a4e:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <USART_0_udre_isr_cb+0x1>
     a52:	30 97       	sbiw	r30, 0x00	; 0
     a54:	09 f0       	breq	.+2      	; 0xa58 <__vector_19+0x30>
     a56:	09 95       	icall
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
     a7a:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <USART_0_tx_head>
     a7e:	2f 5f       	subi	r18, 0xFF	; 255
     a80:	2f 77       	andi	r18, 0x7F	; 127
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
     a82:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <USART_0_tx_elements>
     a86:	90 38       	cpi	r25, 0x80	; 128
     a88:	e1 f3       	breq	.-8      	; 0xa82 <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
     a8a:	e2 2f       	mov	r30, r18
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	e1 57       	subi	r30, 0x71	; 113
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
     a94:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <USART_0_tx_head>
	ENTER_CRITICAL(W);
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	0f 92       	push	r0
	USART_0_tx_elements++;
     a9e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <USART_0_tx_elements>
	EXIT_CRITICAL(W);
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR0B |= (1 << UDRIE0);
     aac:	e1 ec       	ldi	r30, 0xC1	; 193
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	80 83       	st	Z, r24
     ab6:	08 95       	ret

00000ab8 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     ab8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <USART_0_write>
	return 0;
}
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	08 95       	ret

00000ac2 <USART_0_init>:
{

	// Module is in UART mode

	/* Enable USART0 */
	PRR0 &= ~(1 << PRUSART0);
     ac2:	e4 e6       	ldi	r30, 0x64	; 100
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	8d 7f       	andi	r24, 0xFD	; 253
     aca:	80 83       	st	Z, r24

#define BAUD 57600

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
     acc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = USE_2X << U2X0 /*  */
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
     adc:	88 e9       	ldi	r24, 0x98	; 152
     ade:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
     ae2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <USART_0_rx_tail>
	USART_0_rx_head     = x;
     ae6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <USART_0_rx_head>
	USART_0_rx_elements = x;
     aea:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <USART_0_rx_elements>
	USART_0_tx_tail     = x;
     aee:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <USART_0_tx_tail>
	USART_0_tx_head     = x;
     af2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <USART_0_tx_head>
	USART_0_tx_elements = x;
     af6:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <USART_0_tx_elements>

#if defined(__GNUC__)
	stdout = &USART_0_stream;
     afa:	80 e4       	ldi	r24, 0x40	; 64
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <__iob+0x3>
     b02:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__iob+0x2>
#endif

	return 0;
}
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	08 95       	ret

00000b0a <printf>:
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	eb e8       	ldi	r30, 0x8B	; 139
     b10:	f5 e0       	ldi	r31, 0x05	; 5
     b12:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__prologue_saves__+0x20>
     b16:	ae 01       	movw	r20, r28
     b18:	4b 5f       	subi	r20, 0xFB	; 251
     b1a:	5f 4f       	sbci	r21, 0xFF	; 255
     b1c:	fa 01       	movw	r30, r20
     b1e:	61 91       	ld	r22, Z+
     b20:	71 91       	ld	r23, Z+
     b22:	af 01       	movw	r20, r30
     b24:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__iob+0x2>
     b28:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__iob+0x3>
     b2c:	0e 94 9b 05 	call	0xb36	; 0xb36 <vfprintf>
     b30:	e2 e0       	ldi	r30, 0x02	; 2
     b32:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__epilogue_restores__+0x20>

00000b36 <vfprintf>:
     b36:	ab e0       	ldi	r26, 0x0B	; 11
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	e1 ea       	ldi	r30, 0xA1	; 161
     b3c:	f5 e0       	ldi	r31, 0x05	; 5
     b3e:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__prologue_saves__>
     b42:	6c 01       	movw	r12, r24
     b44:	7b 01       	movw	r14, r22
     b46:	8a 01       	movw	r16, r20
     b48:	fc 01       	movw	r30, r24
     b4a:	17 82       	std	Z+7, r1	; 0x07
     b4c:	16 82       	std	Z+6, r1	; 0x06
     b4e:	83 81       	ldd	r24, Z+3	; 0x03
     b50:	81 ff       	sbrs	r24, 1
     b52:	cc c1       	rjmp	.+920    	; 0xeec <vfprintf+0x3b6>
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	3c 01       	movw	r6, r24
     b5a:	f6 01       	movw	r30, r12
     b5c:	93 81       	ldd	r25, Z+3	; 0x03
     b5e:	f7 01       	movw	r30, r14
     b60:	93 fd       	sbrc	r25, 3
     b62:	85 91       	lpm	r24, Z+
     b64:	93 ff       	sbrs	r25, 3
     b66:	81 91       	ld	r24, Z+
     b68:	7f 01       	movw	r14, r30
     b6a:	88 23       	and	r24, r24
     b6c:	09 f4       	brne	.+2      	; 0xb70 <vfprintf+0x3a>
     b6e:	ba c1       	rjmp	.+884    	; 0xee4 <vfprintf+0x3ae>
     b70:	85 32       	cpi	r24, 0x25	; 37
     b72:	39 f4       	brne	.+14     	; 0xb82 <vfprintf+0x4c>
     b74:	93 fd       	sbrc	r25, 3
     b76:	85 91       	lpm	r24, Z+
     b78:	93 ff       	sbrs	r25, 3
     b7a:	81 91       	ld	r24, Z+
     b7c:	7f 01       	movw	r14, r30
     b7e:	85 32       	cpi	r24, 0x25	; 37
     b80:	29 f4       	brne	.+10     	; 0xb8c <vfprintf+0x56>
     b82:	b6 01       	movw	r22, r12
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     b8a:	e7 cf       	rjmp	.-50     	; 0xb5a <vfprintf+0x24>
     b8c:	91 2c       	mov	r9, r1
     b8e:	21 2c       	mov	r2, r1
     b90:	31 2c       	mov	r3, r1
     b92:	ff e1       	ldi	r31, 0x1F	; 31
     b94:	f3 15       	cp	r31, r3
     b96:	d8 f0       	brcs	.+54     	; 0xbce <vfprintf+0x98>
     b98:	8b 32       	cpi	r24, 0x2B	; 43
     b9a:	79 f0       	breq	.+30     	; 0xbba <vfprintf+0x84>
     b9c:	38 f4       	brcc	.+14     	; 0xbac <vfprintf+0x76>
     b9e:	80 32       	cpi	r24, 0x20	; 32
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <vfprintf+0x8a>
     ba2:	83 32       	cpi	r24, 0x23	; 35
     ba4:	a1 f4       	brne	.+40     	; 0xbce <vfprintf+0x98>
     ba6:	23 2d       	mov	r18, r3
     ba8:	20 61       	ori	r18, 0x10	; 16
     baa:	1d c0       	rjmp	.+58     	; 0xbe6 <vfprintf+0xb0>
     bac:	8d 32       	cpi	r24, 0x2D	; 45
     bae:	61 f0       	breq	.+24     	; 0xbc8 <vfprintf+0x92>
     bb0:	80 33       	cpi	r24, 0x30	; 48
     bb2:	69 f4       	brne	.+26     	; 0xbce <vfprintf+0x98>
     bb4:	23 2d       	mov	r18, r3
     bb6:	21 60       	ori	r18, 0x01	; 1
     bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <vfprintf+0xb0>
     bba:	83 2d       	mov	r24, r3
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	38 2e       	mov	r3, r24
     bc0:	e3 2d       	mov	r30, r3
     bc2:	e4 60       	ori	r30, 0x04	; 4
     bc4:	3e 2e       	mov	r3, r30
     bc6:	2a c0       	rjmp	.+84     	; 0xc1c <vfprintf+0xe6>
     bc8:	f3 2d       	mov	r31, r3
     bca:	f8 60       	ori	r31, 0x08	; 8
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <vfprintf+0xd2>
     bce:	37 fc       	sbrc	r3, 7
     bd0:	2d c0       	rjmp	.+90     	; 0xc2c <vfprintf+0xf6>
     bd2:	20 ed       	ldi	r18, 0xD0	; 208
     bd4:	28 0f       	add	r18, r24
     bd6:	2a 30       	cpi	r18, 0x0A	; 10
     bd8:	40 f0       	brcs	.+16     	; 0xbea <vfprintf+0xb4>
     bda:	8e 32       	cpi	r24, 0x2E	; 46
     bdc:	b9 f4       	brne	.+46     	; 0xc0c <vfprintf+0xd6>
     bde:	36 fc       	sbrc	r3, 6
     be0:	81 c1       	rjmp	.+770    	; 0xee4 <vfprintf+0x3ae>
     be2:	23 2d       	mov	r18, r3
     be4:	20 64       	ori	r18, 0x40	; 64
     be6:	32 2e       	mov	r3, r18
     be8:	19 c0       	rjmp	.+50     	; 0xc1c <vfprintf+0xe6>
     bea:	36 fe       	sbrs	r3, 6
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <vfprintf+0xc4>
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	98 9e       	mul	r9, r24
     bf2:	20 0d       	add	r18, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	92 2e       	mov	r9, r18
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <vfprintf+0xe6>
     bfa:	ea e0       	ldi	r30, 0x0A	; 10
     bfc:	2e 9e       	mul	r2, r30
     bfe:	20 0d       	add	r18, r0
     c00:	11 24       	eor	r1, r1
     c02:	22 2e       	mov	r2, r18
     c04:	f3 2d       	mov	r31, r3
     c06:	f0 62       	ori	r31, 0x20	; 32
     c08:	3f 2e       	mov	r3, r31
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <vfprintf+0xe6>
     c0c:	8c 36       	cpi	r24, 0x6C	; 108
     c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0xe2>
     c10:	83 2d       	mov	r24, r3
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	38 2e       	mov	r3, r24
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <vfprintf+0xe6>
     c18:	88 36       	cpi	r24, 0x68	; 104
     c1a:	41 f4       	brne	.+16     	; 0xc2c <vfprintf+0xf6>
     c1c:	f7 01       	movw	r30, r14
     c1e:	93 fd       	sbrc	r25, 3
     c20:	85 91       	lpm	r24, Z+
     c22:	93 ff       	sbrs	r25, 3
     c24:	81 91       	ld	r24, Z+
     c26:	7f 01       	movw	r14, r30
     c28:	81 11       	cpse	r24, r1
     c2a:	b3 cf       	rjmp	.-154    	; 0xb92 <vfprintf+0x5c>
     c2c:	98 2f       	mov	r25, r24
     c2e:	9f 7d       	andi	r25, 0xDF	; 223
     c30:	95 54       	subi	r25, 0x45	; 69
     c32:	93 30       	cpi	r25, 0x03	; 3
     c34:	28 f4       	brcc	.+10     	; 0xc40 <vfprintf+0x10a>
     c36:	0c 5f       	subi	r16, 0xFC	; 252
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	9f e3       	ldi	r25, 0x3F	; 63
     c3c:	99 83       	std	Y+1, r25	; 0x01
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <vfprintf+0x124>
     c40:	83 36       	cpi	r24, 0x63	; 99
     c42:	31 f0       	breq	.+12     	; 0xc50 <vfprintf+0x11a>
     c44:	83 37       	cpi	r24, 0x73	; 115
     c46:	71 f0       	breq	.+28     	; 0xc64 <vfprintf+0x12e>
     c48:	83 35       	cpi	r24, 0x53	; 83
     c4a:	09 f0       	breq	.+2      	; 0xc4e <vfprintf+0x118>
     c4c:	59 c0       	rjmp	.+178    	; 0xd00 <vfprintf+0x1ca>
     c4e:	21 c0       	rjmp	.+66     	; 0xc92 <vfprintf+0x15c>
     c50:	f8 01       	movw	r30, r16
     c52:	80 81       	ld	r24, Z
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	0e 5f       	subi	r16, 0xFE	; 254
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	88 24       	eor	r8, r8
     c5c:	83 94       	inc	r8
     c5e:	91 2c       	mov	r9, r1
     c60:	53 01       	movw	r10, r6
     c62:	13 c0       	rjmp	.+38     	; 0xc8a <vfprintf+0x154>
     c64:	28 01       	movw	r4, r16
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	4f 0e       	add	r4, r31
     c6a:	51 1c       	adc	r5, r1
     c6c:	f8 01       	movw	r30, r16
     c6e:	a0 80       	ld	r10, Z
     c70:	b1 80       	ldd	r11, Z+1	; 0x01
     c72:	36 fe       	sbrs	r3, 6
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <vfprintf+0x146>
     c76:	69 2d       	mov	r22, r9
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x14a>
     c7c:	6f ef       	ldi	r22, 0xFF	; 255
     c7e:	7f ef       	ldi	r23, 0xFF	; 255
     c80:	c5 01       	movw	r24, r10
     c82:	0e 94 87 07 	call	0xf0e	; 0xf0e <strnlen>
     c86:	4c 01       	movw	r8, r24
     c88:	82 01       	movw	r16, r4
     c8a:	f3 2d       	mov	r31, r3
     c8c:	ff 77       	andi	r31, 0x7F	; 127
     c8e:	3f 2e       	mov	r3, r31
     c90:	16 c0       	rjmp	.+44     	; 0xcbe <vfprintf+0x188>
     c92:	28 01       	movw	r4, r16
     c94:	22 e0       	ldi	r18, 0x02	; 2
     c96:	42 0e       	add	r4, r18
     c98:	51 1c       	adc	r5, r1
     c9a:	f8 01       	movw	r30, r16
     c9c:	a0 80       	ld	r10, Z
     c9e:	b1 80       	ldd	r11, Z+1	; 0x01
     ca0:	36 fe       	sbrs	r3, 6
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <vfprintf+0x174>
     ca4:	69 2d       	mov	r22, r9
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x178>
     caa:	6f ef       	ldi	r22, 0xFF	; 255
     cac:	7f ef       	ldi	r23, 0xFF	; 255
     cae:	c5 01       	movw	r24, r10
     cb0:	0e 94 7c 07 	call	0xef8	; 0xef8 <strnlen_P>
     cb4:	4c 01       	movw	r8, r24
     cb6:	f3 2d       	mov	r31, r3
     cb8:	f0 68       	ori	r31, 0x80	; 128
     cba:	3f 2e       	mov	r3, r31
     cbc:	82 01       	movw	r16, r4
     cbe:	33 fc       	sbrc	r3, 3
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <vfprintf+0x1c2>
     cc2:	82 2d       	mov	r24, r2
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	88 16       	cp	r8, r24
     cc8:	99 06       	cpc	r9, r25
     cca:	b0 f4       	brcc	.+44     	; 0xcf8 <vfprintf+0x1c2>
     ccc:	b6 01       	movw	r22, r12
     cce:	80 e2       	ldi	r24, 0x20	; 32
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     cd6:	2a 94       	dec	r2
     cd8:	f4 cf       	rjmp	.-24     	; 0xcc2 <vfprintf+0x18c>
     cda:	f5 01       	movw	r30, r10
     cdc:	37 fc       	sbrc	r3, 7
     cde:	85 91       	lpm	r24, Z+
     ce0:	37 fe       	sbrs	r3, 7
     ce2:	81 91       	ld	r24, Z+
     ce4:	5f 01       	movw	r10, r30
     ce6:	b6 01       	movw	r22, r12
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     cee:	21 10       	cpse	r2, r1
     cf0:	2a 94       	dec	r2
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	82 1a       	sub	r8, r18
     cf6:	91 08       	sbc	r9, r1
     cf8:	81 14       	cp	r8, r1
     cfa:	91 04       	cpc	r9, r1
     cfc:	71 f7       	brne	.-36     	; 0xcda <vfprintf+0x1a4>
     cfe:	e8 c0       	rjmp	.+464    	; 0xed0 <vfprintf+0x39a>
     d00:	84 36       	cpi	r24, 0x64	; 100
     d02:	11 f0       	breq	.+4      	; 0xd08 <vfprintf+0x1d2>
     d04:	89 36       	cpi	r24, 0x69	; 105
     d06:	41 f5       	brne	.+80     	; 0xd58 <vfprintf+0x222>
     d08:	f8 01       	movw	r30, r16
     d0a:	37 fe       	sbrs	r3, 7
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <vfprintf+0x1e6>
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	0c 5f       	subi	r16, 0xFC	; 252
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <vfprintf+0x1f6>
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	07 2e       	mov	r0, r23
     d22:	00 0c       	add	r0, r0
     d24:	88 0b       	sbc	r24, r24
     d26:	99 0b       	sbc	r25, r25
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	f3 2d       	mov	r31, r3
     d2e:	ff 76       	andi	r31, 0x6F	; 111
     d30:	3f 2e       	mov	r3, r31
     d32:	97 ff       	sbrs	r25, 7
     d34:	09 c0       	rjmp	.+18     	; 0xd48 <vfprintf+0x212>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	f0 68       	ori	r31, 0x80	; 128
     d46:	3f 2e       	mov	r3, r31
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	a3 01       	movw	r20, r6
     d4e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__ultoa_invert>
     d52:	88 2e       	mov	r8, r24
     d54:	86 18       	sub	r8, r6
     d56:	45 c0       	rjmp	.+138    	; 0xde2 <vfprintf+0x2ac>
     d58:	85 37       	cpi	r24, 0x75	; 117
     d5a:	31 f4       	brne	.+12     	; 0xd68 <vfprintf+0x232>
     d5c:	23 2d       	mov	r18, r3
     d5e:	2f 7e       	andi	r18, 0xEF	; 239
     d60:	b2 2e       	mov	r11, r18
     d62:	2a e0       	ldi	r18, 0x0A	; 10
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	25 c0       	rjmp	.+74     	; 0xdb2 <vfprintf+0x27c>
     d68:	93 2d       	mov	r25, r3
     d6a:	99 7f       	andi	r25, 0xF9	; 249
     d6c:	b9 2e       	mov	r11, r25
     d6e:	8f 36       	cpi	r24, 0x6F	; 111
     d70:	c1 f0       	breq	.+48     	; 0xda2 <vfprintf+0x26c>
     d72:	18 f4       	brcc	.+6      	; 0xd7a <vfprintf+0x244>
     d74:	88 35       	cpi	r24, 0x58	; 88
     d76:	79 f0       	breq	.+30     	; 0xd96 <vfprintf+0x260>
     d78:	b5 c0       	rjmp	.+362    	; 0xee4 <vfprintf+0x3ae>
     d7a:	80 37       	cpi	r24, 0x70	; 112
     d7c:	19 f0       	breq	.+6      	; 0xd84 <vfprintf+0x24e>
     d7e:	88 37       	cpi	r24, 0x78	; 120
     d80:	21 f0       	breq	.+8      	; 0xd8a <vfprintf+0x254>
     d82:	b0 c0       	rjmp	.+352    	; 0xee4 <vfprintf+0x3ae>
     d84:	e9 2f       	mov	r30, r25
     d86:	e0 61       	ori	r30, 0x10	; 16
     d88:	be 2e       	mov	r11, r30
     d8a:	b4 fe       	sbrs	r11, 4
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <vfprintf+0x272>
     d8e:	fb 2d       	mov	r31, r11
     d90:	f4 60       	ori	r31, 0x04	; 4
     d92:	bf 2e       	mov	r11, r31
     d94:	09 c0       	rjmp	.+18     	; 0xda8 <vfprintf+0x272>
     d96:	34 fe       	sbrs	r3, 4
     d98:	0a c0       	rjmp	.+20     	; 0xdae <vfprintf+0x278>
     d9a:	29 2f       	mov	r18, r25
     d9c:	26 60       	ori	r18, 0x06	; 6
     d9e:	b2 2e       	mov	r11, r18
     da0:	06 c0       	rjmp	.+12     	; 0xdae <vfprintf+0x278>
     da2:	28 e0       	ldi	r18, 0x08	; 8
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <vfprintf+0x27c>
     da8:	20 e1       	ldi	r18, 0x10	; 16
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x27c>
     dae:	20 e1       	ldi	r18, 0x10	; 16
     db0:	32 e0       	ldi	r19, 0x02	; 2
     db2:	f8 01       	movw	r30, r16
     db4:	b7 fe       	sbrs	r11, 7
     db6:	07 c0       	rjmp	.+14     	; 0xdc6 <vfprintf+0x290>
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	0c 5f       	subi	r16, 0xFC	; 252
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <vfprintf+0x29c>
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 5f       	subi	r16, 0xFE	; 254
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	a3 01       	movw	r20, r6
     dd4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__ultoa_invert>
     dd8:	88 2e       	mov	r8, r24
     dda:	86 18       	sub	r8, r6
     ddc:	fb 2d       	mov	r31, r11
     dde:	ff 77       	andi	r31, 0x7F	; 127
     de0:	3f 2e       	mov	r3, r31
     de2:	36 fe       	sbrs	r3, 6
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <vfprintf+0x2ca>
     de6:	23 2d       	mov	r18, r3
     de8:	2e 7f       	andi	r18, 0xFE	; 254
     dea:	a2 2e       	mov	r10, r18
     dec:	89 14       	cp	r8, r9
     dee:	58 f4       	brcc	.+22     	; 0xe06 <vfprintf+0x2d0>
     df0:	34 fe       	sbrs	r3, 4
     df2:	0b c0       	rjmp	.+22     	; 0xe0a <vfprintf+0x2d4>
     df4:	32 fc       	sbrc	r3, 2
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <vfprintf+0x2d4>
     df8:	83 2d       	mov	r24, r3
     dfa:	8e 7e       	andi	r24, 0xEE	; 238
     dfc:	a8 2e       	mov	r10, r24
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <vfprintf+0x2d4>
     e00:	b8 2c       	mov	r11, r8
     e02:	a3 2c       	mov	r10, r3
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <vfprintf+0x2d6>
     e06:	b8 2c       	mov	r11, r8
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <vfprintf+0x2d6>
     e0a:	b9 2c       	mov	r11, r9
     e0c:	a4 fe       	sbrs	r10, 4
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <vfprintf+0x2f8>
     e10:	fe 01       	movw	r30, r28
     e12:	e8 0d       	add	r30, r8
     e14:	f1 1d       	adc	r31, r1
     e16:	80 81       	ld	r24, Z
     e18:	80 33       	cpi	r24, 0x30	; 48
     e1a:	21 f4       	brne	.+8      	; 0xe24 <vfprintf+0x2ee>
     e1c:	9a 2d       	mov	r25, r10
     e1e:	99 7e       	andi	r25, 0xE9	; 233
     e20:	a9 2e       	mov	r10, r25
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x300>
     e24:	a2 fe       	sbrs	r10, 2
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <vfprintf+0x2fe>
     e28:	b3 94       	inc	r11
     e2a:	b3 94       	inc	r11
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <vfprintf+0x300>
     e2e:	8a 2d       	mov	r24, r10
     e30:	86 78       	andi	r24, 0x86	; 134
     e32:	09 f0       	breq	.+2      	; 0xe36 <vfprintf+0x300>
     e34:	b3 94       	inc	r11
     e36:	a3 fc       	sbrc	r10, 3
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <vfprintf+0x326>
     e3a:	a0 fe       	sbrs	r10, 0
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <vfprintf+0x314>
     e3e:	b2 14       	cp	r11, r2
     e40:	88 f4       	brcc	.+34     	; 0xe64 <vfprintf+0x32e>
     e42:	28 0c       	add	r2, r8
     e44:	92 2c       	mov	r9, r2
     e46:	9b 18       	sub	r9, r11
     e48:	0e c0       	rjmp	.+28     	; 0xe66 <vfprintf+0x330>
     e4a:	b2 14       	cp	r11, r2
     e4c:	60 f4       	brcc	.+24     	; 0xe66 <vfprintf+0x330>
     e4e:	b6 01       	movw	r22, r12
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     e58:	b3 94       	inc	r11
     e5a:	f7 cf       	rjmp	.-18     	; 0xe4a <vfprintf+0x314>
     e5c:	b2 14       	cp	r11, r2
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <vfprintf+0x330>
     e60:	2b 18       	sub	r2, r11
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x332>
     e64:	98 2c       	mov	r9, r8
     e66:	21 2c       	mov	r2, r1
     e68:	a4 fe       	sbrs	r10, 4
     e6a:	10 c0       	rjmp	.+32     	; 0xe8c <vfprintf+0x356>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     e76:	a2 fe       	sbrs	r10, 2
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <vfprintf+0x372>
     e7a:	a1 fc       	sbrc	r10, 1
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <vfprintf+0x34e>
     e7e:	88 e7       	ldi	r24, 0x78	; 120
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x352>
     e84:	88 e5       	ldi	r24, 0x58	; 88
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	b6 01       	movw	r22, r12
     e8a:	0c c0       	rjmp	.+24     	; 0xea4 <vfprintf+0x36e>
     e8c:	8a 2d       	mov	r24, r10
     e8e:	86 78       	andi	r24, 0x86	; 134
     e90:	59 f0       	breq	.+22     	; 0xea8 <vfprintf+0x372>
     e92:	a1 fe       	sbrs	r10, 1
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x364>
     e96:	8b e2       	ldi	r24, 0x2B	; 43
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <vfprintf+0x366>
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	a7 fc       	sbrc	r10, 7
     e9e:	8d e2       	ldi	r24, 0x2D	; 45
     ea0:	b6 01       	movw	r22, r12
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ea8:	89 14       	cp	r8, r9
     eaa:	38 f4       	brcc	.+14     	; 0xeba <vfprintf+0x384>
     eac:	b6 01       	movw	r22, r12
     eae:	80 e3       	ldi	r24, 0x30	; 48
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     eb6:	9a 94       	dec	r9
     eb8:	f7 cf       	rjmp	.-18     	; 0xea8 <vfprintf+0x372>
     eba:	8a 94       	dec	r8
     ebc:	f3 01       	movw	r30, r6
     ebe:	e8 0d       	add	r30, r8
     ec0:	f1 1d       	adc	r31, r1
     ec2:	80 81       	ld	r24, Z
     ec4:	b6 01       	movw	r22, r12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ecc:	81 10       	cpse	r8, r1
     ece:	f5 cf       	rjmp	.-22     	; 0xeba <vfprintf+0x384>
     ed0:	22 20       	and	r2, r2
     ed2:	09 f4       	brne	.+2      	; 0xed6 <vfprintf+0x3a0>
     ed4:	42 ce       	rjmp	.-892    	; 0xb5a <vfprintf+0x24>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ee0:	2a 94       	dec	r2
     ee2:	f6 cf       	rjmp	.-20     	; 0xed0 <vfprintf+0x39a>
     ee4:	f6 01       	movw	r30, r12
     ee6:	86 81       	ldd	r24, Z+6	; 0x06
     ee8:	97 81       	ldd	r25, Z+7	; 0x07
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x3ba>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	2b 96       	adiw	r28, 0x0b	; 11
     ef2:	e2 e1       	ldi	r30, 0x12	; 18
     ef4:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__epilogue_restores__>

00000ef8 <strnlen_P>:
     ef8:	fc 01       	movw	r30, r24
     efa:	05 90       	lpm	r0, Z+
     efc:	61 50       	subi	r22, 0x01	; 1
     efe:	70 40       	sbci	r23, 0x00	; 0
     f00:	01 10       	cpse	r0, r1
     f02:	d8 f7       	brcc	.-10     	; 0xefa <strnlen_P+0x2>
     f04:	80 95       	com	r24
     f06:	90 95       	com	r25
     f08:	8e 0f       	add	r24, r30
     f0a:	9f 1f       	adc	r25, r31
     f0c:	08 95       	ret

00000f0e <strnlen>:
     f0e:	fc 01       	movw	r30, r24
     f10:	61 50       	subi	r22, 0x01	; 1
     f12:	70 40       	sbci	r23, 0x00	; 0
     f14:	01 90       	ld	r0, Z+
     f16:	01 10       	cpse	r0, r1
     f18:	d8 f7       	brcc	.-10     	; 0xf10 <strnlen+0x2>
     f1a:	80 95       	com	r24
     f1c:	90 95       	com	r25
     f1e:	8e 0f       	add	r24, r30
     f20:	9f 1f       	adc	r25, r31
     f22:	08 95       	ret

00000f24 <fputc>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	fb 01       	movw	r30, r22
     f2e:	23 81       	ldd	r18, Z+3	; 0x03
     f30:	21 fd       	sbrc	r18, 1
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <fputc+0x16>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	2c c0       	rjmp	.+88     	; 0xf92 <fputc+0x6e>
     f3a:	22 ff       	sbrs	r18, 2
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <fputc+0x46>
     f3e:	46 81       	ldd	r20, Z+6	; 0x06
     f40:	57 81       	ldd	r21, Z+7	; 0x07
     f42:	24 81       	ldd	r18, Z+4	; 0x04
     f44:	35 81       	ldd	r19, Z+5	; 0x05
     f46:	42 17       	cp	r20, r18
     f48:	53 07       	cpc	r21, r19
     f4a:	44 f4       	brge	.+16     	; 0xf5c <fputc+0x38>
     f4c:	a0 81       	ld	r26, Z
     f4e:	b1 81       	ldd	r27, Z+1	; 0x01
     f50:	9d 01       	movw	r18, r26
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	31 83       	std	Z+1, r19	; 0x01
     f58:	20 83       	st	Z, r18
     f5a:	8c 93       	st	X, r24
     f5c:	26 81       	ldd	r18, Z+6	; 0x06
     f5e:	37 81       	ldd	r19, Z+7	; 0x07
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	37 83       	std	Z+7, r19	; 0x07
     f66:	26 83       	std	Z+6, r18	; 0x06
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <fputc+0x6e>
     f6a:	8b 01       	movw	r16, r22
     f6c:	ec 01       	movw	r28, r24
     f6e:	fb 01       	movw	r30, r22
     f70:	00 84       	ldd	r0, Z+8	; 0x08
     f72:	f1 85       	ldd	r31, Z+9	; 0x09
     f74:	e0 2d       	mov	r30, r0
     f76:	09 95       	icall
     f78:	89 2b       	or	r24, r25
     f7a:	e1 f6       	brne	.-72     	; 0xf34 <fputc+0x10>
     f7c:	d8 01       	movw	r26, r16
     f7e:	16 96       	adiw	r26, 0x06	; 6
     f80:	8d 91       	ld	r24, X+
     f82:	9c 91       	ld	r25, X
     f84:	17 97       	sbiw	r26, 0x07	; 7
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	17 96       	adiw	r26, 0x07	; 7
     f8a:	9c 93       	st	X, r25
     f8c:	8e 93       	st	-X, r24
     f8e:	16 97       	sbiw	r26, 0x06	; 6
     f90:	ce 01       	movw	r24, r28
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <__ultoa_invert>:
     f9c:	fa 01       	movw	r30, r20
     f9e:	aa 27       	eor	r26, r26
     fa0:	28 30       	cpi	r18, 0x08	; 8
     fa2:	51 f1       	breq	.+84     	; 0xff8 <__ultoa_invert+0x5c>
     fa4:	20 31       	cpi	r18, 0x10	; 16
     fa6:	81 f1       	breq	.+96     	; 0x1008 <__ultoa_invert+0x6c>
     fa8:	e8 94       	clt
     faa:	6f 93       	push	r22
     fac:	6e 7f       	andi	r22, 0xFE	; 254
     fae:	6e 5f       	subi	r22, 0xFE	; 254
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	af 4f       	sbci	r26, 0xFF	; 255
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	3e d0       	rcall	.+124    	; 0x1038 <__ultoa_invert+0x9c>
     fbc:	b4 e0       	ldi	r27, 0x04	; 4
     fbe:	3c d0       	rcall	.+120    	; 0x1038 <__ultoa_invert+0x9c>
     fc0:	67 0f       	add	r22, r23
     fc2:	78 1f       	adc	r23, r24
     fc4:	89 1f       	adc	r24, r25
     fc6:	9a 1f       	adc	r25, r26
     fc8:	a1 1d       	adc	r26, r1
     fca:	68 0f       	add	r22, r24
     fcc:	79 1f       	adc	r23, r25
     fce:	8a 1f       	adc	r24, r26
     fd0:	91 1d       	adc	r25, r1
     fd2:	a1 1d       	adc	r26, r1
     fd4:	6a 0f       	add	r22, r26
     fd6:	71 1d       	adc	r23, r1
     fd8:	81 1d       	adc	r24, r1
     fda:	91 1d       	adc	r25, r1
     fdc:	a1 1d       	adc	r26, r1
     fde:	20 d0       	rcall	.+64     	; 0x1020 <__ultoa_invert+0x84>
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__ultoa_invert+0x48>
     fe2:	68 94       	set
     fe4:	3f 91       	pop	r19
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	26 9f       	mul	r18, r22
     fea:	11 24       	eor	r1, r1
     fec:	30 19       	sub	r19, r0
     fee:	30 5d       	subi	r19, 0xD0	; 208
     ff0:	31 93       	st	Z+, r19
     ff2:	de f6       	brtc	.-74     	; 0xfaa <__ultoa_invert+0xe>
     ff4:	cf 01       	movw	r24, r30
     ff6:	08 95       	ret
     ff8:	46 2f       	mov	r20, r22
     ffa:	47 70       	andi	r20, 0x07	; 7
     ffc:	40 5d       	subi	r20, 0xD0	; 208
     ffe:	41 93       	st	Z+, r20
    1000:	b3 e0       	ldi	r27, 0x03	; 3
    1002:	0f d0       	rcall	.+30     	; 0x1022 <__ultoa_invert+0x86>
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__ultoa_invert+0x5c>
    1006:	f6 cf       	rjmp	.-20     	; 0xff4 <__ultoa_invert+0x58>
    1008:	46 2f       	mov	r20, r22
    100a:	4f 70       	andi	r20, 0x0F	; 15
    100c:	40 5d       	subi	r20, 0xD0	; 208
    100e:	4a 33       	cpi	r20, 0x3A	; 58
    1010:	18 f0       	brcs	.+6      	; 0x1018 <__ultoa_invert+0x7c>
    1012:	49 5d       	subi	r20, 0xD9	; 217
    1014:	31 fd       	sbrc	r19, 1
    1016:	40 52       	subi	r20, 0x20	; 32
    1018:	41 93       	st	Z+, r20
    101a:	02 d0       	rcall	.+4      	; 0x1020 <__ultoa_invert+0x84>
    101c:	a9 f7       	brne	.-22     	; 0x1008 <__ultoa_invert+0x6c>
    101e:	ea cf       	rjmp	.-44     	; 0xff4 <__ultoa_invert+0x58>
    1020:	b4 e0       	ldi	r27, 0x04	; 4
    1022:	a6 95       	lsr	r26
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	ba 95       	dec	r27
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__ultoa_invert+0x86>
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 05       	cpc	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	08 95       	ret
    1038:	9b 01       	movw	r18, r22
    103a:	ac 01       	movw	r20, r24
    103c:	0a 2e       	mov	r0, r26
    103e:	06 94       	lsr	r0
    1040:	57 95       	ror	r21
    1042:	47 95       	ror	r20
    1044:	37 95       	ror	r19
    1046:	27 95       	ror	r18
    1048:	ba 95       	dec	r27
    104a:	c9 f7       	brne	.-14     	; 0x103e <__ultoa_invert+0xa2>
    104c:	62 0f       	add	r22, r18
    104e:	73 1f       	adc	r23, r19
    1050:	84 1f       	adc	r24, r20
    1052:	95 1f       	adc	r25, r21
    1054:	a0 1d       	adc	r26, r0
    1056:	08 95       	ret

00001058 <__prologue_saves__>:
    1058:	2f 92       	push	r2
    105a:	3f 92       	push	r3
    105c:	4f 92       	push	r4
    105e:	5f 92       	push	r5
    1060:	6f 92       	push	r6
    1062:	7f 92       	push	r7
    1064:	8f 92       	push	r8
    1066:	9f 92       	push	r9
    1068:	af 92       	push	r10
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	ca 1b       	sub	r28, r26
    1082:	db 0b       	sbc	r29, r27
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	09 94       	ijmp

00001090 <__epilogue_restores__>:
    1090:	2a 88       	ldd	r2, Y+18	; 0x12
    1092:	39 88       	ldd	r3, Y+17	; 0x11
    1094:	48 88       	ldd	r4, Y+16	; 0x10
    1096:	5f 84       	ldd	r5, Y+15	; 0x0f
    1098:	6e 84       	ldd	r6, Y+14	; 0x0e
    109a:	7d 84       	ldd	r7, Y+13	; 0x0d
    109c:	8c 84       	ldd	r8, Y+12	; 0x0c
    109e:	9b 84       	ldd	r9, Y+11	; 0x0b
    10a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    10a2:	b9 84       	ldd	r11, Y+9	; 0x09
    10a4:	c8 84       	ldd	r12, Y+8	; 0x08
    10a6:	df 80       	ldd	r13, Y+7	; 0x07
    10a8:	ee 80       	ldd	r14, Y+6	; 0x06
    10aa:	fd 80       	ldd	r15, Y+5	; 0x05
    10ac:	0c 81       	ldd	r16, Y+4	; 0x04
    10ae:	1b 81       	ldd	r17, Y+3	; 0x03
    10b0:	aa 81       	ldd	r26, Y+2	; 0x02
    10b2:	b9 81       	ldd	r27, Y+1	; 0x01
    10b4:	ce 0f       	add	r28, r30
    10b6:	d1 1d       	adc	r29, r1
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	ed 01       	movw	r28, r26
    10c4:	08 95       	ret

000010c6 <_exit>:
    10c6:	f8 94       	cli

000010c8 <__stop_program>:
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <__stop_program>
