
UART_wIRQ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000996  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800118  00800118  00000a42  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001517  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b73  00000000  00000000  00002127  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098d  00000000  00000000  00002c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000971  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000436  00000000  00000000  000041e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000461f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_18>
  4c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  9e:	0c 94 c9 04 	jmp	0x992	; 0x992 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a6:	0e 94 3c 01 	call	0x278	; 0x278 <system_init>
  aa:	08 95       	ret

000000ac <USART_SETUP>:

void USART_SETUP(void){
	#define F_CPU 16000000
	#define BAUD 9600
	#define BRC ((F_CPU/16/BAUD)-1)
	USART_0_initialization();
  ac:	0e 94 2d 01 	call	0x25a	; 0x25a <USART_0_initialization>
	Uart_struct Uart;
	commands_out_enum Uart_out;
	commands_in_enum Uart_in;
	//static bool rx_command_immediate;
	//static bool tx_command_immediate;
	UBRR0H=(BRC>>8);
  b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=BRC;
  b4:	87 e6       	ldi	r24, 0x67	; 103
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ba:	08 95       	ret

000000bc <__vector_18>:
	
	//sei();
	/*Set up code here so that you will have the appropriate data to send or to receive.*/
	
}
ISR (USART_RX_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	65 97       	sbiw	r28, 0x15	; 21
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61
	//#define commands *(commands)
	//#define commands_in *(commands_in)
	//#define commands_out *(commands_out)
	//#define FRAME *Uart_FRAME
	
	UCSR0B = UCSR0B | (0 << RXCIE0); // To disable reception interrupt while we process this.
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 83       	st	Z, r24
	UDR0=Uart_block.temp_buffer; // Loading it into a temporary buffer for analysis.
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	int character_length;
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Command preparation block
///////////////////////////////////////////////////////////////////////////////////////////////////////
	if ((Uart_block.command_flag) && (!Uart_block.data_flag)) // putting the received info as a command. // length of command not decided.
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 23       	and	r24, r24
  fe:	d9 f0       	breq	.+54     	; 0x136 <__vector_18+0x7a>
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	81 11       	cpse	r24, r1
 104:	18 c0       	rjmp	.+48     	; 0x136 <__vector_18+0x7a>
	{
		Uart_block.rxcommand=Uart_block.temp_buffer; //deal with command flag here.
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	8d 83       	std	Y+5, r24	; 0x05
		/////////////////////////////////////////////////////////////////////////////////////
		if ((Uart_block.command_flag) && (!Uart_block.data_flag)) //Execute command stored at rxcommand. Write a switch case for various commands.
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	88 23       	and	r24, r24
 10e:	69 f0       	breq	.+26     	; 0x12a <__vector_18+0x6e>
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	81 11       	cpse	r24, r1
 114:	0a c0       	rjmp	.+20     	; 0x12a <__vector_18+0x6e>
		{
			/* Put the code here that executes the particular command. Or write a function and jump to that place and raises a flag when its job is done.*/
			if (Uart_block.rxcommand==commands_in.sendplease){printf(Uart_block.rxcommand);}
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	81 11       	cpse	r24, r1
 11a:	07 c0       	rjmp	.+14     	; 0x12a <__vector_18+0x6e>
 11c:	8d 81       	ldd	r24, Y+5	; 0x05
 11e:	1f 92       	push	r1
 120:	8f 93       	push	r24
 122:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <printf>
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
		}
		/* Write some code here for analysis for calling some other function or something.*/
		//Uart_block.command_flag=false;
		UCSR0B = UCSR0B| (1 << RXCIE0);
 12a:	e1 ec       	ldi	r30, 0xC1	; 193
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 68       	ori	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
		return;	
 134:	3c c0       	rjmp	.+120    	; 0x1ae <__vector_18+0xf2>
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Data preparation Block
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (Uart_block.data_flag && (Uart_block.passage_length==0))
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	88 23       	and	r24, r24
 13a:	91 f0       	breq	.+36     	; 0x160 <__vector_18+0xa4>
 13c:	8e 81       	ldd	r24, Y+6	; 0x06
 13e:	9f 81       	ldd	r25, Y+7	; 0x07
 140:	89 2b       	or	r24, r25
 142:	71 f4       	brne	.+28     	; 0x160 <__vector_18+0xa4>
	{
		Uart_block.rxcommand=commands_in.keepit;
 144:	1d 82       	std	Y+5, r1	; 0x05
		Uart_block.passage_length=Uart_block.temp_buffer;
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	9f 83       	std	Y+7, r25	; 0x07
 14c:	8e 83       	std	Y+6, r24	; 0x06
		Uart_block.passage_length==0;
 14e:	8e 81       	ldd	r24, Y+6	; 0x06
 150:	9f 81       	ldd	r25, Y+7	; 0x07
		Uart_block.command_flag=false;
 152:	1a 82       	std	Y+2, r1	; 0x02
		UCSR0B = UCSR0B| (1 << RXCIE0);
 154:	e1 ec       	ldi	r30, 0xC1	; 193
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	80 83       	st	Z, r24
		return;
 15e:	27 c0       	rjmp	.+78     	; 0x1ae <__vector_18+0xf2>
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Entry Byte (First Byte) Handling Block
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (Uart_block.temp_buffer==commands.sending_command) // If it is indicated that it is going to send a command or not. To differentiate from random and other useless comms.Prepare if sending commmand
 160:	99 81       	ldd	r25, Y+1	; 0x01
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	98 13       	cpse	r25, r24
 166:	0a c0       	rjmp	.+20     	; 0x17c <__vector_18+0xc0>
	{
		Uart_block.rxcommand=commands.sending_command;
 168:	8d 83       	std	Y+5, r24	; 0x05
		Uart_block.command_flag=true;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	8a 83       	std	Y+2, r24	; 0x02
		Uart_block.data_flag=false;
 16e:	1b 82       	std	Y+3, r1	; 0x03
		//Uart_block.temp_buffer=0x00;
		UCSR0B = UCSR0B| (1 << RXCIE0); // Re-enabling the reception interrupt.
 170:	e1 ec       	ldi	r30, 0xC1	; 193
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24
		return;
 17a:	19 c0       	rjmp	.+50     	; 0x1ae <__vector_18+0xf2>
	}
	else if (Uart_block.temp_buffer==commands.sending_data)
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	81 11       	cpse	r24, r1
 180:	0b c0       	rjmp	.+22     	; 0x198 <__vector_18+0xdc>
	{
		Uart_block.rxcommand=commands_in.keepit;
 182:	1d 82       	std	Y+5, r1	; 0x05
		Uart_block.data_flag=true;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	8b 83       	std	Y+3, r24	; 0x03
		Uart_block.passage_length==0;
 188:	8e 81       	ldd	r24, Y+6	; 0x06
 18a:	9f 81       	ldd	r25, Y+7	; 0x07
		//Uart_block.temp_buffer=0x00;
		UCSR0B = UCSR0B| (1 << RXCIE0);
 18c:	e1 ec       	ldi	r30, 0xC1	; 193
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 68       	ori	r24, 0x80	; 128
 194:	80 83       	st	Z, r24
		return;	
 196:	0b c0       	rjmp	.+22     	; 0x1ae <__vector_18+0xf2>
	}
	else
	{
			Uart_block.txcommand=commands_in.wrong_cmd_rcvd;
 198:	1c 82       	std	Y+4, r1	; 0x04
			//tx_command_immediate=true;
			Uart_block.command_flag=false;
 19a:	1a 82       	std	Y+2, r1	; 0x02
			Uart_block.data_flag=false;
 19c:	1b 82       	std	Y+3, r1	; 0x03
			//printf("Wrong Value received");
			UDR0=0x57;
 19e:	87 e5       	ldi	r24, 0x57	; 87
 1a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			//Uart_block.temp_buffer=0x00;
			UCSR0B = UCSR0B| (1 << RXCIE0);
 1a4:	e1 ec       	ldi	r30, 0xC1	; 193
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//End of Data Handling Block		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
}
 1ae:	65 96       	adiw	r28, 0x15	; 21
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <main>:
#define Buffersize 256 // Set the buffer size here.
char Message[8] = "sheshank";

int main(void)
{
	atmel_start_init();
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <atmel_start_init>
	USART_SETUP();
 1e4:	0e 94 56 00 	call	0xac	; 0xac <USART_SETUP>
 1e8:	2a c0       	rjmp	.+84     	; 0x23e <main+0x5e>
		
			while (USART_0_is_tx_ready())
			{
				for (i=0;i<strlen(Message);i++)
				{
				UDR0=Message[i];
 1ea:	fc 01       	movw	r30, r24
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	20 81       	ld	r18, Z
 1f2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	39 e6       	ldi	r19, 0x69	; 105
 1fa:	48 e1       	ldi	r20, 0x18	; 24
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	30 40       	sbci	r19, 0x00	; 0
 200:	40 40       	sbci	r20, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x1c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x26>
 206:	00 00       	nop
		//printf("hello Sheshank");
		//printf("\n");
		
			while (USART_0_is_tx_ready())
			{
				for (i=0;i<strlen(Message);i++)
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	02 c0       	rjmp	.+4      	; 0x210 <main+0x30>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	e0 e0       	ldi	r30, 0x00	; 0
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	01 90       	ld	r0, Z+
 216:	00 20       	and	r0, r0
 218:	e9 f7       	brne	.-6      	; 0x214 <main+0x34>
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	f1 40       	sbci	r31, 0x01	; 1
 220:	8e 17       	cp	r24, r30
 222:	9f 07       	cpc	r25, r31
 224:	10 f3       	brcs	.-60     	; 0x1ea <main+0xa>
				UDR0=Message[i];
				//printf("Sheshank");
				_delay_ms(1000);
				}
				
				UDR0=0xA;
 226:	e6 ec       	ldi	r30, 0xC6	; 198
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	80 83       	st	Z, r24
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x52>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x58>
 238:	00 00       	nop
				_delay_ms(20);
				UDR0=0xD;
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	80 83       	st	Z, r24
	int i=0;
	while (1) {
		//printf("hello Sheshank");
		//printf("\n");
		
			while (USART_0_is_tx_ready())
 23e:	0e 94 a6 01 	call	0x34c	; 0x34c <USART_0_is_tx_ready>
 242:	81 11       	cpse	r24, r1
 244:	e3 cf       	rjmp	.-58     	; 0x20c <main+0x2c>
 246:	9f ef       	ldi	r25, 0xFF	; 255
 248:	29 e6       	ldi	r18, 0x69	; 105
 24a:	38 e1       	ldi	r19, 0x18	; 24
 24c:	91 50       	subi	r25, 0x01	; 1
 24e:	20 40       	sbci	r18, 0x00	; 0
 250:	30 40       	sbci	r19, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x6c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x76>
 256:	00 00       	nop
 258:	f2 cf       	rjmp	.-28     	; 0x23e <main+0x5e>

0000025a <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 25a:	8a b1       	in	r24, 0x0a	; 10
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8e 7f       	andi	r24, 0xFE	; 254
 264:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 272:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <USART_0_init>
 276:	08 95       	ret

00000278 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 278:	8f ee       	ldi	r24, 0xEF	; 239
 27a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 27e:	84 b1       	in	r24, 0x04	; 4
 280:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 282:	85 b1       	in	r24, 0x05	; 5
 284:	9f ef       	ldi	r25, 0xFF	; 255
 286:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 288:	87 b1       	in	r24, 0x07	; 7
 28a:	80 78       	andi	r24, 0x80	; 128
 28c:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	8f 67       	ori	r24, 0x7F	; 127
 292:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 294:	8a b1       	in	r24, 0x0a	; 10
 296:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	60 e8       	ldi	r22, 0x80	; 128
 2a0:	81 e6       	ldi	r24, 0x61	; 97
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 57 01 	call	0x2ae	; 0x2ae <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 2a8:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 2aa:	15 be       	out	0x35, r1	; 53
 2ac:	08 95       	ret

000002ae <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 2ae:	2f b7       	in	r18, 0x3f	; 63
	cli
 2b0:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 2b2:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 2b4:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 2b6:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 2b8:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 2ba:	08 95       	ret

000002bc <USART_0_default_udre_isr_cb>:
	USART_0_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_0_rxbuf[tmptail];
}
 2bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2c0:	88 23       	and	r24, r24
 2c2:	89 f0       	breq	.+34     	; 0x2e6 <USART_0_default_udre_isr_cb+0x2a>
 2c4:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <USART_0_tx_tail>
 2c8:	ef 5f       	subi	r30, 0xFF	; 255
 2ca:	e7 70       	andi	r30, 0x07	; 7
 2cc:	e0 93 19 01 	sts	0x0119, r30	; 0x800119 <USART_0_tx_tail>
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e5 5e       	subi	r30, 0xE5	; 229
 2d4:	fe 4f       	sbci	r31, 0xFE	; 254
 2d6:	80 81       	ld	r24, Z
 2d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2dc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 2e6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2ea:	81 11       	cpse	r24, r1
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <USART_0_default_udre_isr_cb+0x3c>
 2ee:	e1 ec       	ldi	r30, 0xC1	; 193
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7d       	andi	r24, 0xDF	; 223
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <__vector_19>:
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
 31c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <USART_0_udre_isr_cb>
 320:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <USART_0_udre_isr_cb+0x1>
 324:	30 97       	sbiw	r30, 0x00	; 0
 326:	09 f0       	breq	.+2      	; 0x32a <__vector_19+0x30>
 328:	09 95       	icall
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <USART_0_is_tx_ready>:
 34c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__data_end>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	98 30       	cpi	r25, 0x08	; 8
 354:	09 f4       	brne	.+2      	; 0x358 <USART_0_is_tx_ready+0xc>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret

0000035a <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
 35a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <USART_0_tx_head>
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
 362:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__data_end>
 366:	98 30       	cpi	r25, 0x08	; 8
 368:	e1 f3       	breq	.-8      	; 0x362 <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
 36a:	e2 2f       	mov	r30, r18
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	e5 5e       	subi	r30, 0xE5	; 229
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
 374:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <USART_0_tx_head>
	ENTER_CRITICAL(W);
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	0f 92       	push	r0
	USART_0_tx_elements++;
 37e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	EXIT_CRITICAL(W);
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR0B |= (1 << UDRIE0);
 38c:	e1 ec       	ldi	r30, 0xC1	; 193
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	80 62       	ori	r24, 0x20	; 32
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 398:	0e 94 ad 01 	call	0x35a	; 0x35a <USART_0_write>
	return 0;
}
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	08 95       	ret

000003a2 <USART_0_init>:
{

	// Module is in UART mode

	/* Enable USART0 */
	PRR &= ~(1 << PRUSART0);
 3a2:	e4 e6       	ldi	r30, 0x64	; 100
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	8d 7f       	andi	r24, 0xFD	; 253
 3aa:	80 83       	st	Z, r24

#define BAUD 9600

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
 3ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
 3b0:	83 e3       	ldi	r24, 0x33	; 51
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = USE_2X << U2X0 /*  */
 3b6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
 3ba:	88 e9       	ldi	r24, 0x98	; 152
 3bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	         | 0 << UDRIE0  /* USART Data Register Empty Interupt Enable: disabled */
	         | 1 << RXEN0   /* Receiver Enable: enabled */
	         | 1 << TXEN0   /* Transmitter Enable: enabled */
	         | 0 << UCSZ02; /*  */

	UCSR0C = (0 << UMSEL01) | (0 << UMSEL00)  /*  */
 3c0:	8e e3       	ldi	r24, 0x3E	; 62
 3c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	//USART_0_tx_tail     = x;
	//USART_0_tx_head     = x;
	//USART_0_tx_elements = x;

#if defined(__GNUC__)
	stdout = &USART_0_stream;
 3c6:	8a e0       	ldi	r24, 0x0A	; 10
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <__iob+0x3>
 3ce:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__iob+0x2>
#endif

	return 0;
}
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret

000003d6 <printf>:
 3d6:	a0 e0       	ldi	r26, 0x00	; 0
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e1 ef       	ldi	r30, 0xF1	; 241
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	0c 94 a2 04 	jmp	0x944	; 0x944 <__prologue_saves__+0x20>
 3e2:	ae 01       	movw	r20, r28
 3e4:	4b 5f       	subi	r20, 0xFB	; 251
 3e6:	5f 4f       	sbci	r21, 0xFF	; 255
 3e8:	fa 01       	movw	r30, r20
 3ea:	61 91       	ld	r22, Z+
 3ec:	71 91       	ld	r23, Z+
 3ee:	af 01       	movw	r20, r30
 3f0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <__iob+0x2>
 3f4:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <__iob+0x3>
 3f8:	0e 94 01 02 	call	0x402	; 0x402 <vfprintf>
 3fc:	e2 e0       	ldi	r30, 0x02	; 2
 3fe:	0c 94 be 04 	jmp	0x97c	; 0x97c <__epilogue_restores__+0x20>

00000402 <vfprintf>:
 402:	ab e0       	ldi	r26, 0x0B	; 11
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e7 e0       	ldi	r30, 0x07	; 7
 408:	f2 e0       	ldi	r31, 0x02	; 2
 40a:	0c 94 92 04 	jmp	0x924	; 0x924 <__prologue_saves__>
 40e:	6c 01       	movw	r12, r24
 410:	7b 01       	movw	r14, r22
 412:	8a 01       	movw	r16, r20
 414:	fc 01       	movw	r30, r24
 416:	17 82       	std	Z+7, r1	; 0x07
 418:	16 82       	std	Z+6, r1	; 0x06
 41a:	83 81       	ldd	r24, Z+3	; 0x03
 41c:	81 ff       	sbrs	r24, 1
 41e:	cc c1       	rjmp	.+920    	; 0x7b8 <vfprintf+0x3b6>
 420:	ce 01       	movw	r24, r28
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	3c 01       	movw	r6, r24
 426:	f6 01       	movw	r30, r12
 428:	93 81       	ldd	r25, Z+3	; 0x03
 42a:	f7 01       	movw	r30, r14
 42c:	93 fd       	sbrc	r25, 3
 42e:	85 91       	lpm	r24, Z+
 430:	93 ff       	sbrs	r25, 3
 432:	81 91       	ld	r24, Z+
 434:	7f 01       	movw	r14, r30
 436:	88 23       	and	r24, r24
 438:	09 f4       	brne	.+2      	; 0x43c <vfprintf+0x3a>
 43a:	ba c1       	rjmp	.+884    	; 0x7b0 <vfprintf+0x3ae>
 43c:	85 32       	cpi	r24, 0x25	; 37
 43e:	39 f4       	brne	.+14     	; 0x44e <vfprintf+0x4c>
 440:	93 fd       	sbrc	r25, 3
 442:	85 91       	lpm	r24, Z+
 444:	93 ff       	sbrs	r25, 3
 446:	81 91       	ld	r24, Z+
 448:	7f 01       	movw	r14, r30
 44a:	85 32       	cpi	r24, 0x25	; 37
 44c:	29 f4       	brne	.+10     	; 0x458 <vfprintf+0x56>
 44e:	b6 01       	movw	r22, r12
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 456:	e7 cf       	rjmp	.-50     	; 0x426 <vfprintf+0x24>
 458:	91 2c       	mov	r9, r1
 45a:	21 2c       	mov	r2, r1
 45c:	31 2c       	mov	r3, r1
 45e:	ff e1       	ldi	r31, 0x1F	; 31
 460:	f3 15       	cp	r31, r3
 462:	d8 f0       	brcs	.+54     	; 0x49a <vfprintf+0x98>
 464:	8b 32       	cpi	r24, 0x2B	; 43
 466:	79 f0       	breq	.+30     	; 0x486 <vfprintf+0x84>
 468:	38 f4       	brcc	.+14     	; 0x478 <vfprintf+0x76>
 46a:	80 32       	cpi	r24, 0x20	; 32
 46c:	79 f0       	breq	.+30     	; 0x48c <vfprintf+0x8a>
 46e:	83 32       	cpi	r24, 0x23	; 35
 470:	a1 f4       	brne	.+40     	; 0x49a <vfprintf+0x98>
 472:	23 2d       	mov	r18, r3
 474:	20 61       	ori	r18, 0x10	; 16
 476:	1d c0       	rjmp	.+58     	; 0x4b2 <vfprintf+0xb0>
 478:	8d 32       	cpi	r24, 0x2D	; 45
 47a:	61 f0       	breq	.+24     	; 0x494 <vfprintf+0x92>
 47c:	80 33       	cpi	r24, 0x30	; 48
 47e:	69 f4       	brne	.+26     	; 0x49a <vfprintf+0x98>
 480:	23 2d       	mov	r18, r3
 482:	21 60       	ori	r18, 0x01	; 1
 484:	16 c0       	rjmp	.+44     	; 0x4b2 <vfprintf+0xb0>
 486:	83 2d       	mov	r24, r3
 488:	82 60       	ori	r24, 0x02	; 2
 48a:	38 2e       	mov	r3, r24
 48c:	e3 2d       	mov	r30, r3
 48e:	e4 60       	ori	r30, 0x04	; 4
 490:	3e 2e       	mov	r3, r30
 492:	2a c0       	rjmp	.+84     	; 0x4e8 <vfprintf+0xe6>
 494:	f3 2d       	mov	r31, r3
 496:	f8 60       	ori	r31, 0x08	; 8
 498:	1d c0       	rjmp	.+58     	; 0x4d4 <vfprintf+0xd2>
 49a:	37 fc       	sbrc	r3, 7
 49c:	2d c0       	rjmp	.+90     	; 0x4f8 <vfprintf+0xf6>
 49e:	20 ed       	ldi	r18, 0xD0	; 208
 4a0:	28 0f       	add	r18, r24
 4a2:	2a 30       	cpi	r18, 0x0A	; 10
 4a4:	40 f0       	brcs	.+16     	; 0x4b6 <vfprintf+0xb4>
 4a6:	8e 32       	cpi	r24, 0x2E	; 46
 4a8:	b9 f4       	brne	.+46     	; 0x4d8 <vfprintf+0xd6>
 4aa:	36 fc       	sbrc	r3, 6
 4ac:	81 c1       	rjmp	.+770    	; 0x7b0 <vfprintf+0x3ae>
 4ae:	23 2d       	mov	r18, r3
 4b0:	20 64       	ori	r18, 0x40	; 64
 4b2:	32 2e       	mov	r3, r18
 4b4:	19 c0       	rjmp	.+50     	; 0x4e8 <vfprintf+0xe6>
 4b6:	36 fe       	sbrs	r3, 6
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <vfprintf+0xc4>
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	98 9e       	mul	r9, r24
 4be:	20 0d       	add	r18, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	92 2e       	mov	r9, r18
 4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <vfprintf+0xe6>
 4c6:	ea e0       	ldi	r30, 0x0A	; 10
 4c8:	2e 9e       	mul	r2, r30
 4ca:	20 0d       	add	r18, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	22 2e       	mov	r2, r18
 4d0:	f3 2d       	mov	r31, r3
 4d2:	f0 62       	ori	r31, 0x20	; 32
 4d4:	3f 2e       	mov	r3, r31
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <vfprintf+0xe6>
 4d8:	8c 36       	cpi	r24, 0x6C	; 108
 4da:	21 f4       	brne	.+8      	; 0x4e4 <vfprintf+0xe2>
 4dc:	83 2d       	mov	r24, r3
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	38 2e       	mov	r3, r24
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <vfprintf+0xe6>
 4e4:	88 36       	cpi	r24, 0x68	; 104
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <vfprintf+0xf6>
 4e8:	f7 01       	movw	r30, r14
 4ea:	93 fd       	sbrc	r25, 3
 4ec:	85 91       	lpm	r24, Z+
 4ee:	93 ff       	sbrs	r25, 3
 4f0:	81 91       	ld	r24, Z+
 4f2:	7f 01       	movw	r14, r30
 4f4:	81 11       	cpse	r24, r1
 4f6:	b3 cf       	rjmp	.-154    	; 0x45e <vfprintf+0x5c>
 4f8:	98 2f       	mov	r25, r24
 4fa:	9f 7d       	andi	r25, 0xDF	; 223
 4fc:	95 54       	subi	r25, 0x45	; 69
 4fe:	93 30       	cpi	r25, 0x03	; 3
 500:	28 f4       	brcc	.+10     	; 0x50c <vfprintf+0x10a>
 502:	0c 5f       	subi	r16, 0xFC	; 252
 504:	1f 4f       	sbci	r17, 0xFF	; 255
 506:	9f e3       	ldi	r25, 0x3F	; 63
 508:	99 83       	std	Y+1, r25	; 0x01
 50a:	0d c0       	rjmp	.+26     	; 0x526 <vfprintf+0x124>
 50c:	83 36       	cpi	r24, 0x63	; 99
 50e:	31 f0       	breq	.+12     	; 0x51c <vfprintf+0x11a>
 510:	83 37       	cpi	r24, 0x73	; 115
 512:	71 f0       	breq	.+28     	; 0x530 <vfprintf+0x12e>
 514:	83 35       	cpi	r24, 0x53	; 83
 516:	09 f0       	breq	.+2      	; 0x51a <vfprintf+0x118>
 518:	59 c0       	rjmp	.+178    	; 0x5cc <vfprintf+0x1ca>
 51a:	21 c0       	rjmp	.+66     	; 0x55e <vfprintf+0x15c>
 51c:	f8 01       	movw	r30, r16
 51e:	80 81       	ld	r24, Z
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	0e 5f       	subi	r16, 0xFE	; 254
 524:	1f 4f       	sbci	r17, 0xFF	; 255
 526:	88 24       	eor	r8, r8
 528:	83 94       	inc	r8
 52a:	91 2c       	mov	r9, r1
 52c:	53 01       	movw	r10, r6
 52e:	13 c0       	rjmp	.+38     	; 0x556 <vfprintf+0x154>
 530:	28 01       	movw	r4, r16
 532:	f2 e0       	ldi	r31, 0x02	; 2
 534:	4f 0e       	add	r4, r31
 536:	51 1c       	adc	r5, r1
 538:	f8 01       	movw	r30, r16
 53a:	a0 80       	ld	r10, Z
 53c:	b1 80       	ldd	r11, Z+1	; 0x01
 53e:	36 fe       	sbrs	r3, 6
 540:	03 c0       	rjmp	.+6      	; 0x548 <vfprintf+0x146>
 542:	69 2d       	mov	r22, r9
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <vfprintf+0x14a>
 548:	6f ef       	ldi	r22, 0xFF	; 255
 54a:	7f ef       	ldi	r23, 0xFF	; 255
 54c:	c5 01       	movw	r24, r10
 54e:	0e 94 ed 03 	call	0x7da	; 0x7da <strnlen>
 552:	4c 01       	movw	r8, r24
 554:	82 01       	movw	r16, r4
 556:	f3 2d       	mov	r31, r3
 558:	ff 77       	andi	r31, 0x7F	; 127
 55a:	3f 2e       	mov	r3, r31
 55c:	16 c0       	rjmp	.+44     	; 0x58a <vfprintf+0x188>
 55e:	28 01       	movw	r4, r16
 560:	22 e0       	ldi	r18, 0x02	; 2
 562:	42 0e       	add	r4, r18
 564:	51 1c       	adc	r5, r1
 566:	f8 01       	movw	r30, r16
 568:	a0 80       	ld	r10, Z
 56a:	b1 80       	ldd	r11, Z+1	; 0x01
 56c:	36 fe       	sbrs	r3, 6
 56e:	03 c0       	rjmp	.+6      	; 0x576 <vfprintf+0x174>
 570:	69 2d       	mov	r22, r9
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <vfprintf+0x178>
 576:	6f ef       	ldi	r22, 0xFF	; 255
 578:	7f ef       	ldi	r23, 0xFF	; 255
 57a:	c5 01       	movw	r24, r10
 57c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <strnlen_P>
 580:	4c 01       	movw	r8, r24
 582:	f3 2d       	mov	r31, r3
 584:	f0 68       	ori	r31, 0x80	; 128
 586:	3f 2e       	mov	r3, r31
 588:	82 01       	movw	r16, r4
 58a:	33 fc       	sbrc	r3, 3
 58c:	1b c0       	rjmp	.+54     	; 0x5c4 <vfprintf+0x1c2>
 58e:	82 2d       	mov	r24, r2
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	88 16       	cp	r8, r24
 594:	99 06       	cpc	r9, r25
 596:	b0 f4       	brcc	.+44     	; 0x5c4 <vfprintf+0x1c2>
 598:	b6 01       	movw	r22, r12
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 5a2:	2a 94       	dec	r2
 5a4:	f4 cf       	rjmp	.-24     	; 0x58e <vfprintf+0x18c>
 5a6:	f5 01       	movw	r30, r10
 5a8:	37 fc       	sbrc	r3, 7
 5aa:	85 91       	lpm	r24, Z+
 5ac:	37 fe       	sbrs	r3, 7
 5ae:	81 91       	ld	r24, Z+
 5b0:	5f 01       	movw	r10, r30
 5b2:	b6 01       	movw	r22, r12
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 5ba:	21 10       	cpse	r2, r1
 5bc:	2a 94       	dec	r2
 5be:	21 e0       	ldi	r18, 0x01	; 1
 5c0:	82 1a       	sub	r8, r18
 5c2:	91 08       	sbc	r9, r1
 5c4:	81 14       	cp	r8, r1
 5c6:	91 04       	cpc	r9, r1
 5c8:	71 f7       	brne	.-36     	; 0x5a6 <vfprintf+0x1a4>
 5ca:	e8 c0       	rjmp	.+464    	; 0x79c <vfprintf+0x39a>
 5cc:	84 36       	cpi	r24, 0x64	; 100
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <vfprintf+0x1d2>
 5d0:	89 36       	cpi	r24, 0x69	; 105
 5d2:	41 f5       	brne	.+80     	; 0x624 <vfprintf+0x222>
 5d4:	f8 01       	movw	r30, r16
 5d6:	37 fe       	sbrs	r3, 7
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <vfprintf+0x1e6>
 5da:	60 81       	ld	r22, Z
 5dc:	71 81       	ldd	r23, Z+1	; 0x01
 5de:	82 81       	ldd	r24, Z+2	; 0x02
 5e0:	93 81       	ldd	r25, Z+3	; 0x03
 5e2:	0c 5f       	subi	r16, 0xFC	; 252
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <vfprintf+0x1f6>
 5e8:	60 81       	ld	r22, Z
 5ea:	71 81       	ldd	r23, Z+1	; 0x01
 5ec:	07 2e       	mov	r0, r23
 5ee:	00 0c       	add	r0, r0
 5f0:	88 0b       	sbc	r24, r24
 5f2:	99 0b       	sbc	r25, r25
 5f4:	0e 5f       	subi	r16, 0xFE	; 254
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	f3 2d       	mov	r31, r3
 5fa:	ff 76       	andi	r31, 0x6F	; 111
 5fc:	3f 2e       	mov	r3, r31
 5fe:	97 ff       	sbrs	r25, 7
 600:	09 c0       	rjmp	.+18     	; 0x614 <vfprintf+0x212>
 602:	90 95       	com	r25
 604:	80 95       	com	r24
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	f0 68       	ori	r31, 0x80	; 128
 612:	3f 2e       	mov	r3, r31
 614:	2a e0       	ldi	r18, 0x0A	; 10
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	a3 01       	movw	r20, r6
 61a:	0e 94 34 04 	call	0x868	; 0x868 <__ultoa_invert>
 61e:	88 2e       	mov	r8, r24
 620:	86 18       	sub	r8, r6
 622:	45 c0       	rjmp	.+138    	; 0x6ae <vfprintf+0x2ac>
 624:	85 37       	cpi	r24, 0x75	; 117
 626:	31 f4       	brne	.+12     	; 0x634 <vfprintf+0x232>
 628:	23 2d       	mov	r18, r3
 62a:	2f 7e       	andi	r18, 0xEF	; 239
 62c:	b2 2e       	mov	r11, r18
 62e:	2a e0       	ldi	r18, 0x0A	; 10
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	25 c0       	rjmp	.+74     	; 0x67e <vfprintf+0x27c>
 634:	93 2d       	mov	r25, r3
 636:	99 7f       	andi	r25, 0xF9	; 249
 638:	b9 2e       	mov	r11, r25
 63a:	8f 36       	cpi	r24, 0x6F	; 111
 63c:	c1 f0       	breq	.+48     	; 0x66e <vfprintf+0x26c>
 63e:	18 f4       	brcc	.+6      	; 0x646 <vfprintf+0x244>
 640:	88 35       	cpi	r24, 0x58	; 88
 642:	79 f0       	breq	.+30     	; 0x662 <vfprintf+0x260>
 644:	b5 c0       	rjmp	.+362    	; 0x7b0 <vfprintf+0x3ae>
 646:	80 37       	cpi	r24, 0x70	; 112
 648:	19 f0       	breq	.+6      	; 0x650 <vfprintf+0x24e>
 64a:	88 37       	cpi	r24, 0x78	; 120
 64c:	21 f0       	breq	.+8      	; 0x656 <vfprintf+0x254>
 64e:	b0 c0       	rjmp	.+352    	; 0x7b0 <vfprintf+0x3ae>
 650:	e9 2f       	mov	r30, r25
 652:	e0 61       	ori	r30, 0x10	; 16
 654:	be 2e       	mov	r11, r30
 656:	b4 fe       	sbrs	r11, 4
 658:	0d c0       	rjmp	.+26     	; 0x674 <vfprintf+0x272>
 65a:	fb 2d       	mov	r31, r11
 65c:	f4 60       	ori	r31, 0x04	; 4
 65e:	bf 2e       	mov	r11, r31
 660:	09 c0       	rjmp	.+18     	; 0x674 <vfprintf+0x272>
 662:	34 fe       	sbrs	r3, 4
 664:	0a c0       	rjmp	.+20     	; 0x67a <vfprintf+0x278>
 666:	29 2f       	mov	r18, r25
 668:	26 60       	ori	r18, 0x06	; 6
 66a:	b2 2e       	mov	r11, r18
 66c:	06 c0       	rjmp	.+12     	; 0x67a <vfprintf+0x278>
 66e:	28 e0       	ldi	r18, 0x08	; 8
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	05 c0       	rjmp	.+10     	; 0x67e <vfprintf+0x27c>
 674:	20 e1       	ldi	r18, 0x10	; 16
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <vfprintf+0x27c>
 67a:	20 e1       	ldi	r18, 0x10	; 16
 67c:	32 e0       	ldi	r19, 0x02	; 2
 67e:	f8 01       	movw	r30, r16
 680:	b7 fe       	sbrs	r11, 7
 682:	07 c0       	rjmp	.+14     	; 0x692 <vfprintf+0x290>
 684:	60 81       	ld	r22, Z
 686:	71 81       	ldd	r23, Z+1	; 0x01
 688:	82 81       	ldd	r24, Z+2	; 0x02
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	0c 5f       	subi	r16, 0xFC	; 252
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	06 c0       	rjmp	.+12     	; 0x69e <vfprintf+0x29c>
 692:	60 81       	ld	r22, Z
 694:	71 81       	ldd	r23, Z+1	; 0x01
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 5f       	subi	r16, 0xFE	; 254
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	a3 01       	movw	r20, r6
 6a0:	0e 94 34 04 	call	0x868	; 0x868 <__ultoa_invert>
 6a4:	88 2e       	mov	r8, r24
 6a6:	86 18       	sub	r8, r6
 6a8:	fb 2d       	mov	r31, r11
 6aa:	ff 77       	andi	r31, 0x7F	; 127
 6ac:	3f 2e       	mov	r3, r31
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	0d c0       	rjmp	.+26     	; 0x6cc <vfprintf+0x2ca>
 6b2:	23 2d       	mov	r18, r3
 6b4:	2e 7f       	andi	r18, 0xFE	; 254
 6b6:	a2 2e       	mov	r10, r18
 6b8:	89 14       	cp	r8, r9
 6ba:	58 f4       	brcc	.+22     	; 0x6d2 <vfprintf+0x2d0>
 6bc:	34 fe       	sbrs	r3, 4
 6be:	0b c0       	rjmp	.+22     	; 0x6d6 <vfprintf+0x2d4>
 6c0:	32 fc       	sbrc	r3, 2
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <vfprintf+0x2d4>
 6c4:	83 2d       	mov	r24, r3
 6c6:	8e 7e       	andi	r24, 0xEE	; 238
 6c8:	a8 2e       	mov	r10, r24
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <vfprintf+0x2d4>
 6cc:	b8 2c       	mov	r11, r8
 6ce:	a3 2c       	mov	r10, r3
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <vfprintf+0x2d6>
 6d2:	b8 2c       	mov	r11, r8
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <vfprintf+0x2d6>
 6d6:	b9 2c       	mov	r11, r9
 6d8:	a4 fe       	sbrs	r10, 4
 6da:	0f c0       	rjmp	.+30     	; 0x6fa <vfprintf+0x2f8>
 6dc:	fe 01       	movw	r30, r28
 6de:	e8 0d       	add	r30, r8
 6e0:	f1 1d       	adc	r31, r1
 6e2:	80 81       	ld	r24, Z
 6e4:	80 33       	cpi	r24, 0x30	; 48
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <vfprintf+0x2ee>
 6e8:	9a 2d       	mov	r25, r10
 6ea:	99 7e       	andi	r25, 0xE9	; 233
 6ec:	a9 2e       	mov	r10, r25
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <vfprintf+0x300>
 6f0:	a2 fe       	sbrs	r10, 2
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <vfprintf+0x2fe>
 6f4:	b3 94       	inc	r11
 6f6:	b3 94       	inc	r11
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <vfprintf+0x300>
 6fa:	8a 2d       	mov	r24, r10
 6fc:	86 78       	andi	r24, 0x86	; 134
 6fe:	09 f0       	breq	.+2      	; 0x702 <vfprintf+0x300>
 700:	b3 94       	inc	r11
 702:	a3 fc       	sbrc	r10, 3
 704:	11 c0       	rjmp	.+34     	; 0x728 <vfprintf+0x326>
 706:	a0 fe       	sbrs	r10, 0
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0x314>
 70a:	b2 14       	cp	r11, r2
 70c:	88 f4       	brcc	.+34     	; 0x730 <vfprintf+0x32e>
 70e:	28 0c       	add	r2, r8
 710:	92 2c       	mov	r9, r2
 712:	9b 18       	sub	r9, r11
 714:	0e c0       	rjmp	.+28     	; 0x732 <vfprintf+0x330>
 716:	b2 14       	cp	r11, r2
 718:	60 f4       	brcc	.+24     	; 0x732 <vfprintf+0x330>
 71a:	b6 01       	movw	r22, r12
 71c:	80 e2       	ldi	r24, 0x20	; 32
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 724:	b3 94       	inc	r11
 726:	f7 cf       	rjmp	.-18     	; 0x716 <vfprintf+0x314>
 728:	b2 14       	cp	r11, r2
 72a:	18 f4       	brcc	.+6      	; 0x732 <vfprintf+0x330>
 72c:	2b 18       	sub	r2, r11
 72e:	02 c0       	rjmp	.+4      	; 0x734 <vfprintf+0x332>
 730:	98 2c       	mov	r9, r8
 732:	21 2c       	mov	r2, r1
 734:	a4 fe       	sbrs	r10, 4
 736:	10 c0       	rjmp	.+32     	; 0x758 <vfprintf+0x356>
 738:	b6 01       	movw	r22, r12
 73a:	80 e3       	ldi	r24, 0x30	; 48
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 742:	a2 fe       	sbrs	r10, 2
 744:	17 c0       	rjmp	.+46     	; 0x774 <vfprintf+0x372>
 746:	a1 fc       	sbrc	r10, 1
 748:	03 c0       	rjmp	.+6      	; 0x750 <vfprintf+0x34e>
 74a:	88 e7       	ldi	r24, 0x78	; 120
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x352>
 750:	88 e5       	ldi	r24, 0x58	; 88
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	b6 01       	movw	r22, r12
 756:	0c c0       	rjmp	.+24     	; 0x770 <vfprintf+0x36e>
 758:	8a 2d       	mov	r24, r10
 75a:	86 78       	andi	r24, 0x86	; 134
 75c:	59 f0       	breq	.+22     	; 0x774 <vfprintf+0x372>
 75e:	a1 fe       	sbrs	r10, 1
 760:	02 c0       	rjmp	.+4      	; 0x766 <vfprintf+0x364>
 762:	8b e2       	ldi	r24, 0x2B	; 43
 764:	01 c0       	rjmp	.+2      	; 0x768 <vfprintf+0x366>
 766:	80 e2       	ldi	r24, 0x20	; 32
 768:	a7 fc       	sbrc	r10, 7
 76a:	8d e2       	ldi	r24, 0x2D	; 45
 76c:	b6 01       	movw	r22, r12
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 774:	89 14       	cp	r8, r9
 776:	38 f4       	brcc	.+14     	; 0x786 <vfprintf+0x384>
 778:	b6 01       	movw	r22, r12
 77a:	80 e3       	ldi	r24, 0x30	; 48
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 782:	9a 94       	dec	r9
 784:	f7 cf       	rjmp	.-18     	; 0x774 <vfprintf+0x372>
 786:	8a 94       	dec	r8
 788:	f3 01       	movw	r30, r6
 78a:	e8 0d       	add	r30, r8
 78c:	f1 1d       	adc	r31, r1
 78e:	80 81       	ld	r24, Z
 790:	b6 01       	movw	r22, r12
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 798:	81 10       	cpse	r8, r1
 79a:	f5 cf       	rjmp	.-22     	; 0x786 <vfprintf+0x384>
 79c:	22 20       	and	r2, r2
 79e:	09 f4       	brne	.+2      	; 0x7a2 <vfprintf+0x3a0>
 7a0:	42 ce       	rjmp	.-892    	; 0x426 <vfprintf+0x24>
 7a2:	b6 01       	movw	r22, r12
 7a4:	80 e2       	ldi	r24, 0x20	; 32
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fputc>
 7ac:	2a 94       	dec	r2
 7ae:	f6 cf       	rjmp	.-20     	; 0x79c <vfprintf+0x39a>
 7b0:	f6 01       	movw	r30, r12
 7b2:	86 81       	ldd	r24, Z+6	; 0x06
 7b4:	97 81       	ldd	r25, Z+7	; 0x07
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x3ba>
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	9f ef       	ldi	r25, 0xFF	; 255
 7bc:	2b 96       	adiw	r28, 0x0b	; 11
 7be:	e2 e1       	ldi	r30, 0x12	; 18
 7c0:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__epilogue_restores__>

000007c4 <strnlen_P>:
 7c4:	fc 01       	movw	r30, r24
 7c6:	05 90       	lpm	r0, Z+
 7c8:	61 50       	subi	r22, 0x01	; 1
 7ca:	70 40       	sbci	r23, 0x00	; 0
 7cc:	01 10       	cpse	r0, r1
 7ce:	d8 f7       	brcc	.-10     	; 0x7c6 <strnlen_P+0x2>
 7d0:	80 95       	com	r24
 7d2:	90 95       	com	r25
 7d4:	8e 0f       	add	r24, r30
 7d6:	9f 1f       	adc	r25, r31
 7d8:	08 95       	ret

000007da <strnlen>:
 7da:	fc 01       	movw	r30, r24
 7dc:	61 50       	subi	r22, 0x01	; 1
 7de:	70 40       	sbci	r23, 0x00	; 0
 7e0:	01 90       	ld	r0, Z+
 7e2:	01 10       	cpse	r0, r1
 7e4:	d8 f7       	brcc	.-10     	; 0x7dc <strnlen+0x2>
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	8e 0f       	add	r24, r30
 7ec:	9f 1f       	adc	r25, r31
 7ee:	08 95       	ret

000007f0 <fputc>:
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	fb 01       	movw	r30, r22
 7fa:	23 81       	ldd	r18, Z+3	; 0x03
 7fc:	21 fd       	sbrc	r18, 1
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	2c c0       	rjmp	.+88     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 806:	22 ff       	sbrs	r18, 2
 808:	16 c0       	rjmp	.+44     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 80a:	46 81       	ldd	r20, Z+6	; 0x06
 80c:	57 81       	ldd	r21, Z+7	; 0x07
 80e:	24 81       	ldd	r18, Z+4	; 0x04
 810:	35 81       	ldd	r19, Z+5	; 0x05
 812:	42 17       	cp	r20, r18
 814:	53 07       	cpc	r21, r19
 816:	44 f4       	brge	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 818:	a0 81       	ld	r26, Z
 81a:	b1 81       	ldd	r27, Z+1	; 0x01
 81c:	9d 01       	movw	r18, r26
 81e:	2f 5f       	subi	r18, 0xFF	; 255
 820:	3f 4f       	sbci	r19, 0xFF	; 255
 822:	31 83       	std	Z+1, r19	; 0x01
 824:	20 83       	st	Z, r18
 826:	8c 93       	st	X, r24
 828:	26 81       	ldd	r18, Z+6	; 0x06
 82a:	37 81       	ldd	r19, Z+7	; 0x07
 82c:	2f 5f       	subi	r18, 0xFF	; 255
 82e:	3f 4f       	sbci	r19, 0xFF	; 255
 830:	37 83       	std	Z+7, r19	; 0x07
 832:	26 83       	std	Z+6, r18	; 0x06
 834:	14 c0       	rjmp	.+40     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 836:	8b 01       	movw	r16, r22
 838:	ec 01       	movw	r28, r24
 83a:	fb 01       	movw	r30, r22
 83c:	00 84       	ldd	r0, Z+8	; 0x08
 83e:	f1 85       	ldd	r31, Z+9	; 0x09
 840:	e0 2d       	mov	r30, r0
 842:	09 95       	icall
 844:	89 2b       	or	r24, r25
 846:	e1 f6       	brne	.-72     	; 0x800 <__DATA_REGION_LENGTH__>
 848:	d8 01       	movw	r26, r16
 84a:	16 96       	adiw	r26, 0x06	; 6
 84c:	8d 91       	ld	r24, X+
 84e:	9c 91       	ld	r25, X
 850:	17 97       	sbiw	r26, 0x07	; 7
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	17 96       	adiw	r26, 0x07	; 7
 856:	9c 93       	st	X, r25
 858:	8e 93       	st	-X, r24
 85a:	16 97       	sbiw	r26, 0x06	; 6
 85c:	ce 01       	movw	r24, r28
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <__ultoa_invert>:
 868:	fa 01       	movw	r30, r20
 86a:	aa 27       	eor	r26, r26
 86c:	28 30       	cpi	r18, 0x08	; 8
 86e:	51 f1       	breq	.+84     	; 0x8c4 <__ultoa_invert+0x5c>
 870:	20 31       	cpi	r18, 0x10	; 16
 872:	81 f1       	breq	.+96     	; 0x8d4 <__ultoa_invert+0x6c>
 874:	e8 94       	clt
 876:	6f 93       	push	r22
 878:	6e 7f       	andi	r22, 0xFE	; 254
 87a:	6e 5f       	subi	r22, 0xFE	; 254
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	af 4f       	sbci	r26, 0xFF	; 255
 884:	b1 e0       	ldi	r27, 0x01	; 1
 886:	3e d0       	rcall	.+124    	; 0x904 <__stack+0x5>
 888:	b4 e0       	ldi	r27, 0x04	; 4
 88a:	3c d0       	rcall	.+120    	; 0x904 <__stack+0x5>
 88c:	67 0f       	add	r22, r23
 88e:	78 1f       	adc	r23, r24
 890:	89 1f       	adc	r24, r25
 892:	9a 1f       	adc	r25, r26
 894:	a1 1d       	adc	r26, r1
 896:	68 0f       	add	r22, r24
 898:	79 1f       	adc	r23, r25
 89a:	8a 1f       	adc	r24, r26
 89c:	91 1d       	adc	r25, r1
 89e:	a1 1d       	adc	r26, r1
 8a0:	6a 0f       	add	r22, r26
 8a2:	71 1d       	adc	r23, r1
 8a4:	81 1d       	adc	r24, r1
 8a6:	91 1d       	adc	r25, r1
 8a8:	a1 1d       	adc	r26, r1
 8aa:	20 d0       	rcall	.+64     	; 0x8ec <__ultoa_invert+0x84>
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <__ultoa_invert+0x48>
 8ae:	68 94       	set
 8b0:	3f 91       	pop	r19
 8b2:	2a e0       	ldi	r18, 0x0A	; 10
 8b4:	26 9f       	mul	r18, r22
 8b6:	11 24       	eor	r1, r1
 8b8:	30 19       	sub	r19, r0
 8ba:	30 5d       	subi	r19, 0xD0	; 208
 8bc:	31 93       	st	Z+, r19
 8be:	de f6       	brtc	.-74     	; 0x876 <__ultoa_invert+0xe>
 8c0:	cf 01       	movw	r24, r30
 8c2:	08 95       	ret
 8c4:	46 2f       	mov	r20, r22
 8c6:	47 70       	andi	r20, 0x07	; 7
 8c8:	40 5d       	subi	r20, 0xD0	; 208
 8ca:	41 93       	st	Z+, r20
 8cc:	b3 e0       	ldi	r27, 0x03	; 3
 8ce:	0f d0       	rcall	.+30     	; 0x8ee <__ultoa_invert+0x86>
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__ultoa_invert+0x5c>
 8d2:	f6 cf       	rjmp	.-20     	; 0x8c0 <__ultoa_invert+0x58>
 8d4:	46 2f       	mov	r20, r22
 8d6:	4f 70       	andi	r20, 0x0F	; 15
 8d8:	40 5d       	subi	r20, 0xD0	; 208
 8da:	4a 33       	cpi	r20, 0x3A	; 58
 8dc:	18 f0       	brcs	.+6      	; 0x8e4 <__ultoa_invert+0x7c>
 8de:	49 5d       	subi	r20, 0xD9	; 217
 8e0:	31 fd       	sbrc	r19, 1
 8e2:	40 52       	subi	r20, 0x20	; 32
 8e4:	41 93       	st	Z+, r20
 8e6:	02 d0       	rcall	.+4      	; 0x8ec <__ultoa_invert+0x84>
 8e8:	a9 f7       	brne	.-22     	; 0x8d4 <__ultoa_invert+0x6c>
 8ea:	ea cf       	rjmp	.-44     	; 0x8c0 <__ultoa_invert+0x58>
 8ec:	b4 e0       	ldi	r27, 0x04	; 4
 8ee:	a6 95       	lsr	r26
 8f0:	97 95       	ror	r25
 8f2:	87 95       	ror	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	ba 95       	dec	r27
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__ultoa_invert+0x86>
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	61 05       	cpc	r22, r1
 900:	71 05       	cpc	r23, r1
 902:	08 95       	ret
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	0a 2e       	mov	r0, r26
 90a:	06 94       	lsr	r0
 90c:	57 95       	ror	r21
 90e:	47 95       	ror	r20
 910:	37 95       	ror	r19
 912:	27 95       	ror	r18
 914:	ba 95       	dec	r27
 916:	c9 f7       	brne	.-14     	; 0x90a <__stack+0xb>
 918:	62 0f       	add	r22, r18
 91a:	73 1f       	adc	r23, r19
 91c:	84 1f       	adc	r24, r20
 91e:	95 1f       	adc	r25, r21
 920:	a0 1d       	adc	r26, r0
 922:	08 95       	ret

00000924 <__prologue_saves__>:
 924:	2f 92       	push	r2
 926:	3f 92       	push	r3
 928:	4f 92       	push	r4
 92a:	5f 92       	push	r5
 92c:	6f 92       	push	r6
 92e:	7f 92       	push	r7
 930:	8f 92       	push	r8
 932:	9f 92       	push	r9
 934:	af 92       	push	r10
 936:	bf 92       	push	r11
 938:	cf 92       	push	r12
 93a:	df 92       	push	r13
 93c:	ef 92       	push	r14
 93e:	ff 92       	push	r15
 940:	0f 93       	push	r16
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	ca 1b       	sub	r28, r26
 94e:	db 0b       	sbc	r29, r27
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	de bf       	out	0x3e, r29	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	cd bf       	out	0x3d, r28	; 61
 95a:	09 94       	ijmp

0000095c <__epilogue_restores__>:
 95c:	2a 88       	ldd	r2, Y+18	; 0x12
 95e:	39 88       	ldd	r3, Y+17	; 0x11
 960:	48 88       	ldd	r4, Y+16	; 0x10
 962:	5f 84       	ldd	r5, Y+15	; 0x0f
 964:	6e 84       	ldd	r6, Y+14	; 0x0e
 966:	7d 84       	ldd	r7, Y+13	; 0x0d
 968:	8c 84       	ldd	r8, Y+12	; 0x0c
 96a:	9b 84       	ldd	r9, Y+11	; 0x0b
 96c:	aa 84       	ldd	r10, Y+10	; 0x0a
 96e:	b9 84       	ldd	r11, Y+9	; 0x09
 970:	c8 84       	ldd	r12, Y+8	; 0x08
 972:	df 80       	ldd	r13, Y+7	; 0x07
 974:	ee 80       	ldd	r14, Y+6	; 0x06
 976:	fd 80       	ldd	r15, Y+5	; 0x05
 978:	0c 81       	ldd	r16, Y+4	; 0x04
 97a:	1b 81       	ldd	r17, Y+3	; 0x03
 97c:	aa 81       	ldd	r26, Y+2	; 0x02
 97e:	b9 81       	ldd	r27, Y+1	; 0x01
 980:	ce 0f       	add	r28, r30
 982:	d1 1d       	adc	r29, r1
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	f8 94       	cli
 988:	de bf       	out	0x3e, r29	; 62
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	cd bf       	out	0x3d, r28	; 61
 98e:	ed 01       	movw	r28, r26
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
