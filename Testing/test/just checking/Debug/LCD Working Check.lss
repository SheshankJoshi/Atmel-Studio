
LCD Working Check.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000522  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000522  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000630  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018e7  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a4  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b56  00000000  00000000  000029db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00003534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ab  00000000  00000000  0000373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010b8  00000000  00000000  00003ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004d9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
  8e:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  96:	0e 94 6d 02 	call	0x4da	; 0x4da <system_init>
  9a:	08 95       	ret

0000009c <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
  9c:	67 2b       	or	r22, r23
  9e:	09 f0       	breq	.+2      	; 0xa2 <pinChange+0x6>
  a0:	a1 c0       	rjmp	.+322    	; 0x1e4 <pinChange+0x148>
  a2:	8a 30       	cpi	r24, 0x0A	; 10
  a4:	91 05       	cpc	r25, r1
  a6:	21 f4       	brne	.+8      	; 0xb0 <pinChange+0x14>
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	08 95       	ret
  b0:	8b 30       	cpi	r24, 0x0B	; 11
  b2:	91 05       	cpc	r25, r1
  b4:	21 f4       	brne	.+8      	; 0xbe <pinChange+0x22>
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	08 95       	ret
  be:	8c 30       	cpi	r24, 0x0C	; 12
  c0:	91 05       	cpc	r25, r1
  c2:	21 f4       	brne	.+8      	; 0xcc <pinChange+0x30>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	08 95       	ret
  cc:	8d 30       	cpi	r24, 0x0D	; 13
  ce:	91 05       	cpc	r25, r1
  d0:	21 f4       	brne	.+8      	; 0xda <pinChange+0x3e>
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret
  da:	8e 30       	cpi	r24, 0x0E	; 14
  dc:	91 05       	cpc	r25, r1
  de:	21 f4       	brne	.+8      	; 0xe8 <pinChange+0x4c>
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret
  e8:	8f 30       	cpi	r24, 0x0F	; 15
  ea:	91 05       	cpc	r25, r1
  ec:	21 f4       	brne	.+8      	; 0xf6 <pinChange+0x5a>
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret
  f6:	80 31       	cpi	r24, 0x10	; 16
  f8:	91 05       	cpc	r25, r1
  fa:	21 f4       	brne	.+8      	; 0x104 <pinChange+0x68>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7b       	andi	r24, 0xBF	; 191
 100:	85 b9       	out	0x05, r24	; 5
 102:	08 95       	ret
 104:	81 31       	cpi	r24, 0x11	; 17
 106:	91 05       	cpc	r25, r1
 108:	21 f4       	brne	.+8      	; 0x112 <pinChange+0x76>
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	85 b9       	out	0x05, r24	; 5
 110:	08 95       	ret
 112:	84 31       	cpi	r24, 0x14	; 20
 114:	91 05       	cpc	r25, r1
 116:	21 f4       	brne	.+8      	; 0x120 <pinChange+0x84>
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	08 95       	ret
 120:	85 31       	cpi	r24, 0x15	; 21
 122:	91 05       	cpc	r25, r1
 124:	21 f4       	brne	.+8      	; 0x12e <pinChange+0x92>
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	08 95       	ret
 12e:	86 31       	cpi	r24, 0x16	; 22
 130:	91 05       	cpc	r25, r1
 132:	21 f4       	brne	.+8      	; 0x13c <pinChange+0xa0>
 134:	88 b1       	in	r24, 0x08	; 8
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	88 b9       	out	0x08, r24	; 8
 13a:	08 95       	ret
 13c:	87 31       	cpi	r24, 0x17	; 23
 13e:	91 05       	cpc	r25, r1
 140:	21 f4       	brne	.+8      	; 0x14a <pinChange+0xae>
 142:	88 b1       	in	r24, 0x08	; 8
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	88 b9       	out	0x08, r24	; 8
 148:	08 95       	ret
 14a:	88 31       	cpi	r24, 0x18	; 24
 14c:	91 05       	cpc	r25, r1
 14e:	21 f4       	brne	.+8      	; 0x158 <pinChange+0xbc>
 150:	88 b1       	in	r24, 0x08	; 8
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	88 b9       	out	0x08, r24	; 8
 156:	08 95       	ret
 158:	89 31       	cpi	r24, 0x19	; 25
 15a:	91 05       	cpc	r25, r1
 15c:	21 f4       	brne	.+8      	; 0x166 <pinChange+0xca>
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	88 b9       	out	0x08, r24	; 8
 164:	08 95       	ret
 166:	8a 31       	cpi	r24, 0x1A	; 26
 168:	91 05       	cpc	r25, r1
 16a:	21 f4       	brne	.+8      	; 0x174 <pinChange+0xd8>
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	8f 7b       	andi	r24, 0xBF	; 191
 170:	88 b9       	out	0x08, r24	; 8
 172:	08 95       	ret
 174:	8e 31       	cpi	r24, 0x1E	; 30
 176:	91 05       	cpc	r25, r1
 178:	21 f4       	brne	.+8      	; 0x182 <pinChange+0xe6>
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	08 95       	ret
 182:	8f 31       	cpi	r24, 0x1F	; 31
 184:	91 05       	cpc	r25, r1
 186:	21 f4       	brne	.+8      	; 0x190 <pinChange+0xf4>
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	08 95       	ret
 190:	80 32       	cpi	r24, 0x20	; 32
 192:	91 05       	cpc	r25, r1
 194:	21 f4       	brne	.+8      	; 0x19e <pinChange+0x102>
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8b 7f       	andi	r24, 0xFB	; 251
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	08 95       	ret
 19e:	81 32       	cpi	r24, 0x21	; 33
 1a0:	91 05       	cpc	r25, r1
 1a2:	21 f4       	brne	.+8      	; 0x1ac <pinChange+0x110>
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	08 95       	ret
 1ac:	82 32       	cpi	r24, 0x22	; 34
 1ae:	91 05       	cpc	r25, r1
 1b0:	21 f4       	brne	.+8      	; 0x1ba <pinChange+0x11e>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	08 95       	ret
 1ba:	83 32       	cpi	r24, 0x23	; 35
 1bc:	91 05       	cpc	r25, r1
 1be:	21 f4       	brne	.+8      	; 0x1c8 <pinChange+0x12c>
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8f 7d       	andi	r24, 0xDF	; 223
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	08 95       	ret
 1c8:	84 32       	cpi	r24, 0x24	; 36
 1ca:	91 05       	cpc	r25, r1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <pinChange+0x13a>
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	08 95       	ret
 1d6:	85 97       	sbiw	r24, 0x25	; 37
 1d8:	09 f0       	breq	.+2      	; 0x1dc <pinChange+0x140>
 1da:	a3 c0       	rjmp	.+326    	; 0x322 <pinChange+0x286>
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	08 95       	ret
 1e4:	8a 30       	cpi	r24, 0x0A	; 10
 1e6:	91 05       	cpc	r25, r1
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <pinChange+0x156>
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	08 95       	ret
 1f2:	8b 30       	cpi	r24, 0x0B	; 11
 1f4:	91 05       	cpc	r25, r1
 1f6:	21 f4       	brne	.+8      	; 0x200 <pinChange+0x164>
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	08 95       	ret
 200:	8c 30       	cpi	r24, 0x0C	; 12
 202:	91 05       	cpc	r25, r1
 204:	21 f4       	brne	.+8      	; 0x20e <pinChange+0x172>
 206:	85 b1       	in	r24, 0x05	; 5
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	08 95       	ret
 20e:	8d 30       	cpi	r24, 0x0D	; 13
 210:	91 05       	cpc	r25, r1
 212:	21 f4       	brne	.+8      	; 0x21c <pinChange+0x180>
 214:	85 b1       	in	r24, 0x05	; 5
 216:	88 60       	ori	r24, 0x08	; 8
 218:	85 b9       	out	0x05, r24	; 5
 21a:	08 95       	ret
 21c:	8e 30       	cpi	r24, 0x0E	; 14
 21e:	91 05       	cpc	r25, r1
 220:	21 f4       	brne	.+8      	; 0x22a <pinChange+0x18e>
 222:	85 b1       	in	r24, 0x05	; 5
 224:	80 61       	ori	r24, 0x10	; 16
 226:	85 b9       	out	0x05, r24	; 5
 228:	08 95       	ret
 22a:	8f 30       	cpi	r24, 0x0F	; 15
 22c:	91 05       	cpc	r25, r1
 22e:	21 f4       	brne	.+8      	; 0x238 <pinChange+0x19c>
 230:	85 b1       	in	r24, 0x05	; 5
 232:	80 62       	ori	r24, 0x20	; 32
 234:	85 b9       	out	0x05, r24	; 5
 236:	08 95       	ret
 238:	80 31       	cpi	r24, 0x10	; 16
 23a:	91 05       	cpc	r25, r1
 23c:	21 f4       	brne	.+8      	; 0x246 <pinChange+0x1aa>
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	80 64       	ori	r24, 0x40	; 64
 242:	85 b9       	out	0x05, r24	; 5
 244:	08 95       	ret
 246:	81 31       	cpi	r24, 0x11	; 17
 248:	91 05       	cpc	r25, r1
 24a:	21 f4       	brne	.+8      	; 0x254 <pinChange+0x1b8>
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	85 b9       	out	0x05, r24	; 5
 252:	08 95       	ret
 254:	84 31       	cpi	r24, 0x14	; 20
 256:	91 05       	cpc	r25, r1
 258:	21 f4       	brne	.+8      	; 0x262 <pinChange+0x1c6>
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	88 b9       	out	0x08, r24	; 8
 260:	08 95       	ret
 262:	85 31       	cpi	r24, 0x15	; 21
 264:	91 05       	cpc	r25, r1
 266:	21 f4       	brne	.+8      	; 0x270 <pinChange+0x1d4>
 268:	88 b1       	in	r24, 0x08	; 8
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	88 b9       	out	0x08, r24	; 8
 26e:	08 95       	ret
 270:	86 31       	cpi	r24, 0x16	; 22
 272:	91 05       	cpc	r25, r1
 274:	21 f4       	brne	.+8      	; 0x27e <pinChange+0x1e2>
 276:	88 b1       	in	r24, 0x08	; 8
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	88 b9       	out	0x08, r24	; 8
 27c:	08 95       	ret
 27e:	87 31       	cpi	r24, 0x17	; 23
 280:	91 05       	cpc	r25, r1
 282:	21 f4       	brne	.+8      	; 0x28c <pinChange+0x1f0>
 284:	88 b1       	in	r24, 0x08	; 8
 286:	88 60       	ori	r24, 0x08	; 8
 288:	88 b9       	out	0x08, r24	; 8
 28a:	08 95       	ret
 28c:	88 31       	cpi	r24, 0x18	; 24
 28e:	91 05       	cpc	r25, r1
 290:	21 f4       	brne	.+8      	; 0x29a <pinChange+0x1fe>
 292:	88 b1       	in	r24, 0x08	; 8
 294:	80 61       	ori	r24, 0x10	; 16
 296:	88 b9       	out	0x08, r24	; 8
 298:	08 95       	ret
 29a:	89 31       	cpi	r24, 0x19	; 25
 29c:	91 05       	cpc	r25, r1
 29e:	21 f4       	brne	.+8      	; 0x2a8 <pinChange+0x20c>
 2a0:	88 b1       	in	r24, 0x08	; 8
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	88 b9       	out	0x08, r24	; 8
 2a6:	08 95       	ret
 2a8:	8a 31       	cpi	r24, 0x1A	; 26
 2aa:	91 05       	cpc	r25, r1
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <pinChange+0x21a>
 2ae:	88 b1       	in	r24, 0x08	; 8
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	88 b9       	out	0x08, r24	; 8
 2b4:	08 95       	ret
 2b6:	8e 31       	cpi	r24, 0x1E	; 30
 2b8:	91 05       	cpc	r25, r1
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <pinChange+0x228>
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	8b b9       	out	0x0b, r24	; 11
 2c2:	08 95       	ret
 2c4:	8f 31       	cpi	r24, 0x1F	; 31
 2c6:	91 05       	cpc	r25, r1
 2c8:	21 f4       	brne	.+8      	; 0x2d2 <pinChange+0x236>
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	8b b9       	out	0x0b, r24	; 11
 2d0:	08 95       	ret
 2d2:	80 32       	cpi	r24, 0x20	; 32
 2d4:	91 05       	cpc	r25, r1
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <pinChange+0x244>
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	8b b9       	out	0x0b, r24	; 11
 2de:	08 95       	ret
 2e0:	81 32       	cpi	r24, 0x21	; 33
 2e2:	91 05       	cpc	r25, r1
 2e4:	21 f4       	brne	.+8      	; 0x2ee <pinChange+0x252>
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	08 95       	ret
 2ee:	82 32       	cpi	r24, 0x22	; 34
 2f0:	91 05       	cpc	r25, r1
 2f2:	21 f4       	brne	.+8      	; 0x2fc <pinChange+0x260>
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	8b b9       	out	0x0b, r24	; 11
 2fa:	08 95       	ret
 2fc:	83 32       	cpi	r24, 0x23	; 35
 2fe:	91 05       	cpc	r25, r1
 300:	21 f4       	brne	.+8      	; 0x30a <pinChange+0x26e>
 302:	8b b1       	in	r24, 0x0b	; 11
 304:	80 62       	ori	r24, 0x20	; 32
 306:	8b b9       	out	0x0b, r24	; 11
 308:	08 95       	ret
 30a:	84 32       	cpi	r24, 0x24	; 36
 30c:	91 05       	cpc	r25, r1
 30e:	21 f4       	brne	.+8      	; 0x318 <pinChange+0x27c>
 310:	8b b1       	in	r24, 0x0b	; 11
 312:	80 64       	ori	r24, 0x40	; 64
 314:	8b b9       	out	0x0b, r24	; 11
 316:	08 95       	ret
 318:	85 97       	sbiw	r24, 0x25	; 37
 31a:	19 f4       	brne	.+6      	; 0x322 <pinChange+0x286>
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	8b b9       	out	0x0b, r24	; 11
 322:	08 95       	ret

00000324 <Lcd8_Port>:
 324:	8b b9       	out	0x0b, r24	; 11
 326:	2f e7       	ldi	r18, 0x7F	; 127
 328:	88 e3       	ldi	r24, 0x38	; 56
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <Lcd8_Port+0x8>
 334:	00 c0       	rjmp	.+0      	; 0x336 <Lcd8_Port+0x12>
 336:	00 00       	nop
 338:	08 95       	ret

0000033a <Lcd8_Cmd>:
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	8b e0       	ldi	r24, 0x0B	; 11
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 34a:	8c 2f       	mov	r24, r28
 34c:	0e 94 92 01 	call	0x324	; 0x324 <Lcd8_Port>
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 35c:	8f ec       	ldi	r24, 0xCF	; 207
 35e:	97 e0       	ldi	r25, 0x07	; 7
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <Lcd8_Cmd+0x26>
 364:	00 c0       	rjmp	.+0      	; 0x366 <Lcd8_Cmd+0x2c>
 366:	00 00       	nop
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 374:	8f ec       	ldi	r24, 0xCF	; 207
 376:	97 e0       	ldi	r25, 0x07	; 7
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <Lcd8_Cmd+0x3e>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <Lcd8_Cmd+0x44>
 37e:	00 00       	nop
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <Lcd8_Clear>:
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 38a:	08 95       	ret

0000038c <Lcd8_Init>:
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	8b e0       	ldi	r24, 0x0B	; 11
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	8a e0       	ldi	r24, 0x0A	; 10
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	9c e9       	ldi	r25, 0x9C	; 156
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Lcd8_Init+0x1c>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Lcd8_Init+0x22>
 3ae:	00 00       	nop
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	97 e2       	ldi	r25, 0x27	; 39
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <Lcd8_Init+0x2e>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <Lcd8_Init+0x34>
 3c0:	00 00       	nop
 3c2:	80 e3       	ldi	r24, 0x30	; 48
 3c4:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3c8:	8f ec       	ldi	r24, 0xCF	; 207
 3ca:	97 e0       	ldi	r25, 0x07	; 7
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <Lcd8_Init+0x40>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <Lcd8_Init+0x46>
 3d2:	00 00       	nop
 3d4:	80 e3       	ldi	r24, 0x30	; 48
 3d6:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	9e e4       	ldi	r25, 0x4E	; 78
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <Lcd8_Init+0x52>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Lcd8_Init+0x58>
 3e4:	00 00       	nop
 3e6:	88 e3       	ldi	r24, 0x38	; 56
 3e8:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd8_Cmd>
 3fe:	08 95       	ret

00000400 <Lcd8_Write_Char>:
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8b e0       	ldi	r24, 0x0B	; 11
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 410:	8c 2f       	mov	r24, r28
 412:	0e 94 92 01 	call	0x324	; 0x324 <Lcd8_Port>
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	8a e0       	ldi	r24, 0x0A	; 10
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 422:	8f e0       	ldi	r24, 0x0F	; 15
 424:	97 e2       	ldi	r25, 0x27	; 39
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <Lcd8_Write_Char+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <Lcd8_Write_Char+0x2c>
 42c:	00 00       	nop
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	8a e0       	ldi	r24, 0x0A	; 10
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 4e 00 	call	0x9c	; 0x9c <pinChange>
 43a:	8f ec       	ldi	r24, 0xCF	; 207
 43c:	97 e0       	ldi	r25, 0x07	; 7
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <Lcd8_Write_Char+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <Lcd8_Write_Char+0x44>
 444:	00 00       	nop
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <Lcd8_Write_String>:
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	8c 01       	movw	r16, r24
 454:	c0 e0       	ldi	r28, 0x00	; 0
 456:	d0 e0       	ldi	r29, 0x00	; 0
 458:	03 c0       	rjmp	.+6      	; 0x460 <Lcd8_Write_String+0x16>
 45a:	0e 94 00 02 	call	0x400	; 0x400 <Lcd8_Write_Char>
 45e:	21 96       	adiw	r28, 0x01	; 1
 460:	f8 01       	movw	r30, r16
 462:	ec 0f       	add	r30, r28
 464:	fd 1f       	adc	r31, r29
 466:	80 81       	ld	r24, Z
 468:	81 11       	cpse	r24, r1
 46a:	f7 cf       	rjmp	.-18     	; 0x45a <Lcd8_Write_String+0x10>
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <Lcd8_Setting>:
		_delay_ms(100);
		//i++;
	}
}
void Lcd8_Setting(void) {
DDRD = 0xFF;
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	8a b9       	out	0x0a, r24	; 10
DDRB = 0xFF;
 47a:	84 b9       	out	0x04, r24	; 4
 47c:	08 95       	ret

0000047e <main>:
void Lcd8_Setting(void);

int main(void)
{
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
 47e:	0e 94 4b 00 	call	0x96	; 0x96 <atmel_start_init>
	Lcd8_Setting();
 482:	0e 94 3b 02 	call	0x476	; 0x476 <Lcd8_Setting>
	Lcd8_Init();
 486:	0e 94 c6 01 	call	0x38c	; 0x38c <Lcd8_Init>
	Lcd8_Write_String("Initializing done");
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 25 02 	call	0x44a	; 0x44a <Lcd8_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 492:	2f ef       	ldi	r18, 0xFF	; 255
 494:	89 e6       	ldi	r24, 0x69	; 105
 496:	98 e1       	ldi	r25, 0x18	; 24
 498:	21 50       	subi	r18, 0x01	; 1
 49a:	80 40       	sbci	r24, 0x00	; 0
 49c:	90 40       	sbci	r25, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <main+0x1a>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0x24>
 4a2:	00 00       	nop
	_delay_ms(1000);
	Lcd8_Clear();
 4a4:	0e 94 c2 01 	call	0x384	; 0x384 <Lcd8_Clear>
	//int i=0;
	/* Replace with your application code */
	while (1) {
		Lcd8_Write_String("This is a test Debug");
 4a8:	82 e1       	ldi	r24, 0x12	; 18
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 25 02 	call	0x44a	; 0x44a <Lcd8_Write_String>
 4b0:	2f e7       	ldi	r18, 0x7F	; 127
 4b2:	8b e8       	ldi	r24, 0x8B	; 139
 4b4:	98 e0       	ldi	r25, 0x08	; 8
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x38>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x42>
 4c0:	00 00       	nop
		_delay_ms(350);
		Lcd8_Clear();
 4c2:	0e 94 c2 01 	call	0x384	; 0x384 <Lcd8_Clear>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	80 e7       	ldi	r24, 0x70	; 112
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0x4e>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0x58>
 4d6:	00 00       	nop
 4d8:	e7 cf       	rjmp	.-50     	; 0x4a8 <main+0x2a>

000004da <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 4da:	8f ee       	ldi	r24, 0xEF	; 239
 4dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 4e0:	84 b1       	in	r24, 0x04	; 4
 4e2:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 4e4:	85 b1       	in	r24, 0x05	; 5
 4e6:	9f ef       	ldi	r25, 0xFF	; 255
 4e8:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 4ea:	87 b1       	in	r24, 0x07	; 7
 4ec:	80 78       	andi	r24, 0x80	; 128
 4ee:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 4f0:	88 b1       	in	r24, 0x08	; 8
 4f2:	8f 67       	ori	r24, 0x7F	; 127
 4f4:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 4f6:	8a b1       	in	r24, 0x0a	; 10
 4f8:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 4fa:	8b b1       	in	r24, 0x0b	; 11
 4fc:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	60 e8       	ldi	r22, 0x80	; 128
 502:	81 e6       	ldi	r24, 0x61	; 97
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 88 02 	call	0x510	; 0x510 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 50a:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 50c:	15 be       	out	0x35, r1	; 53
 50e:	08 95       	ret

00000510 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 510:	2f b7       	in	r18, 0x3f	; 63
	cli
 512:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 514:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 516:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 518:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 51a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 51c:	08 95       	ret

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
